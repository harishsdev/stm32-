
led15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007c00  08007c00  00017c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c1c  08007c1c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007c1c  08007c1c  00017c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c24  08007c24  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c24  08007c24  00017c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c28  08007c28  00017c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000810  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a0  200008a0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019f62  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a0b  00000000  00000000  0003a022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  0003da30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa8  00000000  00000000  0003eb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a55  00000000  00000000  0003fae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c5b  00000000  00000000  00063535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb67a  00000000  00000000  0007a190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014580a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004878  00000000  00000000  00145860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007be8 	.word	0x08007be8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007be8 	.word	0x08007be8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fbf8 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f816 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f912 	bl	80006f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f87c 	bl	80005cc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f8a8 	bl	8000628 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8d6 	bl	8000688 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f006 ff72 	bl	80073c4 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e0:	f006 ff96 	bl	8007410 <MX_USB_HOST_Process>

    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,1);
 80004e4:	2201      	movs	r2, #1
 80004e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ea:	4802      	ldr	r0, [pc, #8]	; (80004f4 <main+0x34>)
 80004ec:	f000 ff28 	bl	8001340 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 80004f0:	e7f6      	b.n	80004e0 <main+0x20>
 80004f2:	bf00      	nop
 80004f4:	40020c00 	.word	0x40020c00

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f007 fa9e 	bl	8007a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <SystemClock_Config+0xcc>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
 800052c:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a21      	ldr	r2, [pc, #132]	; (80005c8 <SystemClock_Config+0xd0>)
 8000542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000554:	2301      	movs	r3, #1
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000568:	2308      	movs	r3, #8
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800056c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000570:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000576:	2307      	movs	r3, #7
 8000578:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fa4c 	bl	8003a1c <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800058a:	f000 f9b1 	bl	80008f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2302      	movs	r3, #2
 8000594:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2105      	movs	r1, #5
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 fcad 	bl	8003f0c <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b8:	f000 f99a 	bl	80008f0 <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3750      	adds	r7, #80	; 0x50
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_I2C1_Init+0x50>)
 80005d2:	4a13      	ldr	r2, [pc, #76]	; (8000620 <MX_I2C1_Init+0x54>)
 80005d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_I2C1_Init+0x50>)
 80005d8:	4a12      	ldr	r2, [pc, #72]	; (8000624 <MX_I2C1_Init+0x58>)
 80005da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_I2C1_Init+0x50>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_I2C1_Init+0x50>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_I2C1_Init+0x50>)
 80005ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <MX_I2C1_Init+0x50>)
 800060a:	f002 fc23 	bl	8002e54 <HAL_I2C_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000614:	f000 f96c 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200000bc 	.word	0x200000bc
 8000620:	40005400 	.word	0x40005400
 8000624:	000186a0 	.word	0x000186a0

08000628 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <MX_I2S3_Init+0x54>)
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <MX_I2S3_Init+0x58>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2S3_Init+0x54>)
 8000634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000638:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_I2S3_Init+0x54>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_I2S3_Init+0x54>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000646:	4b0d      	ldr	r3, [pc, #52]	; (800067c <MX_I2S3_Init+0x54>)
 8000648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800064c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_I2S3_Init+0x54>)
 8000650:	4a0c      	ldr	r2, [pc, #48]	; (8000684 <MX_I2S3_Init+0x5c>)
 8000652:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_I2S3_Init+0x54>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_I2S3_Init+0x54>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_I2S3_Init+0x54>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_I2S3_Init+0x54>)
 8000668:	f002 fd38 	bl	80030dc <HAL_I2S_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000672:	f000 f93d 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000168 	.word	0x20000168
 8000680:	40003c00 	.word	0x40003c00
 8000684:	00017700 	.word	0x00017700

08000688 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_SPI1_Init+0x64>)
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_SPI1_Init+0x68>)
 8000690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_SPI1_Init+0x64>)
 8000694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_SPI1_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_SPI1_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_SPI1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_SPI1_Init+0x64>)
 80006b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_SPI1_Init+0x64>)
 80006d4:	220a      	movs	r2, #10
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_SPI1_Init+0x64>)
 80006da:	f003 ff3f 	bl	800455c <HAL_SPI_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006e4:	f000 f904 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000110 	.word	0x20000110
 80006f0:	40013000 	.word	0x40013000

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	; 0x30
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	4b72      	ldr	r3, [pc, #456]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a71      	ldr	r2, [pc, #452]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 8000714:	f043 0310 	orr.w	r3, r3, #16
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b6f      	ldr	r3, [pc, #444]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0310 	and.w	r3, r3, #16
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	4b6b      	ldr	r3, [pc, #428]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a6a      	ldr	r2, [pc, #424]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b68      	ldr	r3, [pc, #416]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b64      	ldr	r3, [pc, #400]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a63      	ldr	r2, [pc, #396]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b61      	ldr	r3, [pc, #388]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b5d      	ldr	r3, [pc, #372]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a5c      	ldr	r2, [pc, #368]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b5a      	ldr	r3, [pc, #360]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b56      	ldr	r3, [pc, #344]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a55      	ldr	r2, [pc, #340]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b53      	ldr	r3, [pc, #332]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b4f      	ldr	r3, [pc, #316]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a4e      	ldr	r2, [pc, #312]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b4c      	ldr	r3, [pc, #304]	; (80008d8 <MX_GPIO_Init+0x1e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2108      	movs	r1, #8
 80007b6:	4849      	ldr	r0, [pc, #292]	; (80008dc <MX_GPIO_Init+0x1e8>)
 80007b8:	f000 fdc2 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2101      	movs	r1, #1
 80007c0:	4847      	ldr	r0, [pc, #284]	; (80008e0 <MX_GPIO_Init+0x1ec>)
 80007c2:	f000 fdbd 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007c6:	2200      	movs	r2, #0
 80007c8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007cc:	4845      	ldr	r0, [pc, #276]	; (80008e4 <MX_GPIO_Init+0x1f0>)
 80007ce:	f000 fdb7 	bl	8001340 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007d2:	2308      	movs	r3, #8
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	483c      	ldr	r0, [pc, #240]	; (80008dc <MX_GPIO_Init+0x1e8>)
 80007ea:	f000 fc0d 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4836      	ldr	r0, [pc, #216]	; (80008e0 <MX_GPIO_Init+0x1ec>)
 8000806:	f000 fbff 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800080a:	2308      	movs	r3, #8
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800081a:	2305      	movs	r3, #5
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	482e      	ldr	r0, [pc, #184]	; (80008e0 <MX_GPIO_Init+0x1ec>)
 8000826:	f000 fbef 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800082e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	482a      	ldr	r0, [pc, #168]	; (80008e8 <MX_GPIO_Init+0x1f4>)
 8000840:	f000 fbe2 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000844:	2304      	movs	r3, #4
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4825      	ldr	r0, [pc, #148]	; (80008ec <MX_GPIO_Init+0x1f8>)
 8000858:	f000 fbd6 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800085c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800086e:	2305      	movs	r3, #5
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	481c      	ldr	r0, [pc, #112]	; (80008ec <MX_GPIO_Init+0x1f8>)
 800087a:	f000 fbc5 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800087e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000882:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4813      	ldr	r0, [pc, #76]	; (80008e4 <MX_GPIO_Init+0x1f0>)
 8000898:	f000 fbb6 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800089c:	2320      	movs	r3, #32
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_GPIO_Init+0x1f0>)
 80008b0:	f000 fbaa 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_GPIO_Init+0x1e8>)
 80008ca:	f000 fb9d 	bl	8001008 <HAL_GPIO_Init>

}
 80008ce:	bf00      	nop
 80008d0:	3730      	adds	r7, #48	; 0x30
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40020800 	.word	0x40020800
 80008e4:	40020c00 	.word	0x40020c00
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020400 	.word	0x40020400

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800093a:	2007      	movs	r0, #7
 800093c:	f000 fb22 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <HAL_I2C_MspInit+0x84>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d12c      	bne.n	80009c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_I2C_MspInit+0x88>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_I2C_MspInit+0x88>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_I2C_MspInit+0x88>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800098a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000990:	2312      	movs	r3, #18
 8000992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000994:	2301      	movs	r3, #1
 8000996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099c:	2304      	movs	r3, #4
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <HAL_I2C_MspInit+0x8c>)
 80009a8:	f000 fb2e 	bl	8001008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_I2C_MspInit+0x88>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_I2C_MspInit+0x88>)
 80009b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_I2C_MspInit+0x88>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40005400 	.word	0x40005400
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020400 	.word	0x40020400

080009dc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08e      	sub	sp, #56	; 0x38
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a31      	ldr	r2, [pc, #196]	; (8000acc <HAL_I2S_MspInit+0xf0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d15a      	bne.n	8000ac2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a10:	23c0      	movs	r3, #192	; 0xc0
 8000a12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f003 fc5d 	bl	80042dc <HAL_RCCEx_PeriphCLKConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a28:	f7ff ff62 	bl	80008f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a26      	ldr	r2, [pc, #152]	; (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a1f      	ldr	r2, [pc, #124]	; (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6313      	str	r3, [r2, #48]	; 0x30
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6c:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a6e:	f043 0304 	orr.w	r3, r3, #4
 8000a72:	6313      	str	r3, [r2, #48]	; 0x30
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <HAL_I2S_MspInit+0xf4>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a80:	2310      	movs	r3, #16
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a90:	2306      	movs	r3, #6
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <HAL_I2S_MspInit+0xf8>)
 8000a9c:	f000 fab4 	bl	8001008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aa0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab2:	2306      	movs	r3, #6
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <HAL_I2S_MspInit+0xfc>)
 8000abe:	f000 faa3 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3738      	adds	r7, #56	; 0x38
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40003c00 	.word	0x40003c00
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40020800 	.word	0x40020800

08000adc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <HAL_SPI_MspInit+0x84>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12b      	bne.n	8000b56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_SPI_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b36:	23e0      	movs	r3, #224	; 0xe0
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b46:	2305      	movs	r3, #5
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <HAL_SPI_MspInit+0x8c>)
 8000b52:	f000 fa59 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40013000 	.word	0x40013000
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 f8d0 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <OTG_FS_IRQHandler+0x10>)
 8000bc6:	f000 fe3f 	bl	8001848 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000058c 	.word	0x2000058c

08000bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <_sbrk+0x5c>)
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <_sbrk+0x60>)
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <_sbrk+0x64>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <_sbrk+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d207      	bcs.n	8000c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c04:	f006 fee6 	bl	80079d4 <__errno>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c12:	e009      	b.n	8000c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <_sbrk+0x64>)
 8000c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20020000 	.word	0x20020000
 8000c34:	00000400 	.word	0x00000400
 8000c38:	200000ac 	.word	0x200000ac
 8000c3c:	200008a0 	.word	0x200008a0

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6a:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c80:	4c0b      	ldr	r4, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff ffd7 	bl	8000c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f006 fea5 	bl	80079e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fc13 	bl	80004c0 <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ca8:	08007c2c 	.word	0x08007c2c
  ldr r2, =_sbss
 8000cac:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000cb0:	200008a0 	.word	0x200008a0

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f94f 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f808 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fe06 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f967 	bl	8000fee <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d38:	f000 f92f 	bl	8000f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	200001b0 	.word	0x200001b0

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200001b0 	.word	0x200001b0

08000d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff ffee 	bl	8000d84 <HAL_GetTick>
 8000da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000db4:	d005      	beq.n	8000dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_Delay+0x44>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dc2:	bf00      	nop
 8000dc4:	f7ff ffde 	bl	8000d84 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d8f7      	bhi.n	8000dc4 <HAL_Delay+0x28>
  {
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008

08000de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e00:	4013      	ands	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <__NVIC_GetPriorityGrouping+0x18>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	f003 0307 	and.w	r3, r3, #7
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	db0b      	blt.n	8000e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f003 021f 	and.w	r2, r3, #31
 8000e60:	4907      	ldr	r1, [pc, #28]	; (8000e80 <__NVIC_EnableIRQ+0x38>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	095b      	lsrs	r3, r3, #5
 8000e68:	2001      	movs	r0, #1
 8000e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000e100 	.word	0xe000e100

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4908      	ldr	r1, [pc, #32]	; (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	3b04      	subs	r3, #4
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f1c3 0307 	rsb	r3, r3, #7
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d902      	bls.n	8000f08 <NVIC_EncodePriority+0x30>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3b03      	subs	r3, #3
 8000f06:	e000      	b.n	8000f0a <NVIC_EncodePriority+0x32>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43da      	mvns	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43d9      	mvns	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	4313      	orrs	r3, r2
         );
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3724      	adds	r7, #36	; 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f50:	d301      	bcc.n	8000f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00f      	b.n	8000f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <SysTick_Config+0x40>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5e:	210f      	movs	r1, #15
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f64:	f7ff ff8e 	bl	8000e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <SysTick_Config+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <SysTick_Config+0x40>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff29 	bl	8000de4 <__NVIC_SetPriorityGrouping>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fac:	f7ff ff3e 	bl	8000e2c <__NVIC_GetPriorityGrouping>
 8000fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff ff8e 	bl	8000ed8 <NVIC_EncodePriority>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff5d 	bl	8000e84 <__NVIC_SetPriority>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff31 	bl	8000e48 <__NVIC_EnableIRQ>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ffa2 	bl	8000f40 <SysTick_Config>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	e16b      	b.n	80012fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	f040 815a 	bne.w	80012f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b01      	cmp	r3, #1
 800104c:	d005      	beq.n	800105a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001056:	2b02      	cmp	r3, #2
 8001058:	d130      	bne.n	80010bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f003 0201 	and.w	r2, r3, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d017      	beq.n	80010f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d123      	bne.n	800114c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3208      	adds	r2, #8
 8001146:	69b9      	ldr	r1, [r7, #24]
 8001148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0203 	and.w	r2, r3, #3
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80b4 	beq.w	80012f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b60      	ldr	r3, [pc, #384]	; (8001314 <HAL_GPIO_Init+0x30c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a5f      	ldr	r2, [pc, #380]	; (8001314 <HAL_GPIO_Init+0x30c>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <HAL_GPIO_Init+0x30c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011aa:	4a5b      	ldr	r2, [pc, #364]	; (8001318 <HAL_GPIO_Init+0x310>)
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	3302      	adds	r3, #2
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	220f      	movs	r2, #15
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a52      	ldr	r2, [pc, #328]	; (800131c <HAL_GPIO_Init+0x314>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d02b      	beq.n	800122e <HAL_GPIO_Init+0x226>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a51      	ldr	r2, [pc, #324]	; (8001320 <HAL_GPIO_Init+0x318>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d025      	beq.n	800122a <HAL_GPIO_Init+0x222>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a50      	ldr	r2, [pc, #320]	; (8001324 <HAL_GPIO_Init+0x31c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d01f      	beq.n	8001226 <HAL_GPIO_Init+0x21e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4f      	ldr	r2, [pc, #316]	; (8001328 <HAL_GPIO_Init+0x320>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d019      	beq.n	8001222 <HAL_GPIO_Init+0x21a>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4e      	ldr	r2, [pc, #312]	; (800132c <HAL_GPIO_Init+0x324>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0x216>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4d      	ldr	r2, [pc, #308]	; (8001330 <HAL_GPIO_Init+0x328>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00d      	beq.n	800121a <HAL_GPIO_Init+0x212>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4c      	ldr	r2, [pc, #304]	; (8001334 <HAL_GPIO_Init+0x32c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d007      	beq.n	8001216 <HAL_GPIO_Init+0x20e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4b      	ldr	r2, [pc, #300]	; (8001338 <HAL_GPIO_Init+0x330>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_GPIO_Init+0x20a>
 800120e:	2307      	movs	r3, #7
 8001210:	e00e      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001212:	2308      	movs	r3, #8
 8001214:	e00c      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001216:	2306      	movs	r3, #6
 8001218:	e00a      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800121a:	2305      	movs	r3, #5
 800121c:	e008      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800121e:	2304      	movs	r3, #4
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001222:	2303      	movs	r3, #3
 8001224:	e004      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001226:	2302      	movs	r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800122e:	2300      	movs	r3, #0
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	f002 0203 	and.w	r2, r2, #3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4093      	lsls	r3, r2
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001240:	4935      	ldr	r1, [pc, #212]	; (8001318 <HAL_GPIO_Init+0x310>)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <HAL_GPIO_Init+0x334>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001272:	4a32      	ldr	r2, [pc, #200]	; (800133c <HAL_GPIO_Init+0x334>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001278:	4b30      	ldr	r3, [pc, #192]	; (800133c <HAL_GPIO_Init+0x334>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <HAL_GPIO_Init+0x334>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <HAL_GPIO_Init+0x334>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c6:	4a1d      	ldr	r2, [pc, #116]	; (800133c <HAL_GPIO_Init+0x334>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_GPIO_Init+0x334>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f0:	4a12      	ldr	r2, [pc, #72]	; (800133c <HAL_GPIO_Init+0x334>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	f67f ae90 	bls.w	8001024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40013800 	.word	0x40013800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020400 	.word	0x40020400
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40021000 	.word	0x40021000
 8001330:	40021400 	.word	0x40021400
 8001334:	40021800 	.word	0x40021800
 8001338:	40021c00 	.word	0x40021c00
 800133c:	40013c00 	.word	0x40013c00

08001340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800135c:	e003      	b.n	8001366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001372:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001374:	b08f      	sub	sp, #60	; 0x3c
 8001376:	af0a      	add	r7, sp, #40	; 0x28
 8001378:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e054      	b.n	800142e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d106      	bne.n	80013a4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f006 f86e 	bl	8007480 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2203      	movs	r2, #3
 80013a8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 f9c5 	bl	8004752 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	687e      	ldr	r6, [r7, #4]
 80013d0:	466d      	mov	r5, sp
 80013d2:	f106 0410 	add.w	r4, r6, #16
 80013d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80013e6:	1d33      	adds	r3, r6, #4
 80013e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ea:	6838      	ldr	r0, [r7, #0]
 80013ec:	f003 f93f 	bl	800466e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2101      	movs	r1, #1
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 f9bc 	bl	8004774 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	687e      	ldr	r6, [r7, #4]
 8001404:	466d      	mov	r5, sp
 8001406:	f106 0410 	add.w	r4, r6, #16
 800140a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001412:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001416:	e885 0003 	stmia.w	r5, {r0, r1}
 800141a:	1d33      	adds	r3, r6, #4
 800141c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f003 fb22 	bl	8004a68 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001436 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001436:	b590      	push	{r4, r7, lr}
 8001438:	b089      	sub	sp, #36	; 0x24
 800143a:	af04      	add	r7, sp, #16
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	4608      	mov	r0, r1
 8001440:	4611      	mov	r1, r2
 8001442:	461a      	mov	r2, r3
 8001444:	4603      	mov	r3, r0
 8001446:	70fb      	strb	r3, [r7, #3]
 8001448:	460b      	mov	r3, r1
 800144a:	70bb      	strb	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001456:	2b01      	cmp	r3, #1
 8001458:	d101      	bne.n	800145e <HAL_HCD_HC_Init+0x28>
 800145a:	2302      	movs	r3, #2
 800145c:	e076      	b.n	800154c <HAL_HCD_HC_Init+0x116>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	212c      	movs	r1, #44	; 0x2c
 800146c:	fb01 f303 	mul.w	r3, r1, r3
 8001470:	4413      	add	r3, r2
 8001472:	333d      	adds	r3, #61	; 0x3d
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	212c      	movs	r1, #44	; 0x2c
 800147e:	fb01 f303 	mul.w	r3, r1, r3
 8001482:	4413      	add	r3, r2
 8001484:	3338      	adds	r3, #56	; 0x38
 8001486:	787a      	ldrb	r2, [r7, #1]
 8001488:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	212c      	movs	r1, #44	; 0x2c
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	4413      	add	r3, r2
 8001496:	3340      	adds	r3, #64	; 0x40
 8001498:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800149a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	212c      	movs	r1, #44	; 0x2c
 80014a2:	fb01 f303 	mul.w	r3, r1, r3
 80014a6:	4413      	add	r3, r2
 80014a8:	3339      	adds	r3, #57	; 0x39
 80014aa:	78fa      	ldrb	r2, [r7, #3]
 80014ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	212c      	movs	r1, #44	; 0x2c
 80014b4:	fb01 f303 	mul.w	r3, r1, r3
 80014b8:	4413      	add	r3, r2
 80014ba:	333f      	adds	r3, #63	; 0x3f
 80014bc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	78ba      	ldrb	r2, [r7, #2]
 80014c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014ca:	b2d0      	uxtb	r0, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	212c      	movs	r1, #44	; 0x2c
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	333a      	adds	r3, #58	; 0x3a
 80014d8:	4602      	mov	r2, r0
 80014da:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80014dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	da09      	bge.n	80014f8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	212c      	movs	r1, #44	; 0x2c
 80014ea:	fb01 f303 	mul.w	r3, r1, r3
 80014ee:	4413      	add	r3, r2
 80014f0:	333b      	adds	r3, #59	; 0x3b
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e008      	b.n	800150a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	212c      	movs	r1, #44	; 0x2c
 80014fe:	fb01 f303 	mul.w	r3, r1, r3
 8001502:	4413      	add	r3, r2
 8001504:	333b      	adds	r3, #59	; 0x3b
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	212c      	movs	r1, #44	; 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	333c      	adds	r3, #60	; 0x3c
 8001518:	f897 2020 	ldrb.w	r2, [r7, #32]
 800151c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	787c      	ldrb	r4, [r7, #1]
 8001524:	78ba      	ldrb	r2, [r7, #2]
 8001526:	78f9      	ldrb	r1, [r7, #3]
 8001528:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	4623      	mov	r3, r4
 800153a:	f003 fc0f 	bl	8004d5c <USB_HC_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bd90      	pop	{r4, r7, pc}

08001554 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_HCD_HC_Halt+0x1e>
 800156e:	2302      	movs	r3, #2
 8001570:	e00f      	b.n	8001592 <HAL_HCD_HC_Halt+0x3e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	78fa      	ldrb	r2, [r7, #3]
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f003 fe4b 	bl	800521e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	4608      	mov	r0, r1
 80015a6:	4611      	mov	r1, r2
 80015a8:	461a      	mov	r2, r3
 80015aa:	4603      	mov	r3, r0
 80015ac:	70fb      	strb	r3, [r7, #3]
 80015ae:	460b      	mov	r3, r1
 80015b0:	70bb      	strb	r3, [r7, #2]
 80015b2:	4613      	mov	r3, r2
 80015b4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	212c      	movs	r1, #44	; 0x2c
 80015bc:	fb01 f303 	mul.w	r3, r1, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	333b      	adds	r3, #59	; 0x3b
 80015c4:	78ba      	ldrb	r2, [r7, #2]
 80015c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	212c      	movs	r1, #44	; 0x2c
 80015ce:	fb01 f303 	mul.w	r3, r1, r3
 80015d2:	4413      	add	r3, r2
 80015d4:	333f      	adds	r3, #63	; 0x3f
 80015d6:	787a      	ldrb	r2, [r7, #1]
 80015d8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80015da:	7c3b      	ldrb	r3, [r7, #16]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d112      	bne.n	8001606 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	212c      	movs	r1, #44	; 0x2c
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	3342      	adds	r3, #66	; 0x42
 80015ee:	2203      	movs	r2, #3
 80015f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80015f2:	78fb      	ldrb	r3, [r7, #3]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	212c      	movs	r1, #44	; 0x2c
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	333d      	adds	r3, #61	; 0x3d
 8001600:	7f3a      	ldrb	r2, [r7, #28]
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	e008      	b.n	8001618 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	212c      	movs	r1, #44	; 0x2c
 800160c:	fb01 f303 	mul.w	r3, r1, r3
 8001610:	4413      	add	r3, r2
 8001612:	3342      	adds	r3, #66	; 0x42
 8001614:	2202      	movs	r2, #2
 8001616:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001618:	787b      	ldrb	r3, [r7, #1]
 800161a:	2b03      	cmp	r3, #3
 800161c:	f200 80c6 	bhi.w	80017ac <HAL_HCD_HC_SubmitRequest+0x210>
 8001620:	a201      	add	r2, pc, #4	; (adr r2, 8001628 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001626:	bf00      	nop
 8001628:	08001639 	.word	0x08001639
 800162c:	08001799 	.word	0x08001799
 8001630:	0800169d 	.word	0x0800169d
 8001634:	0800171b 	.word	0x0800171b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001638:	7c3b      	ldrb	r3, [r7, #16]
 800163a:	2b01      	cmp	r3, #1
 800163c:	f040 80b8 	bne.w	80017b0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001640:	78bb      	ldrb	r3, [r7, #2]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 80b4 	bne.w	80017b0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001648:	8b3b      	ldrh	r3, [r7, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d108      	bne.n	8001660 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	212c      	movs	r1, #44	; 0x2c
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	4413      	add	r3, r2
 800165a:	3355      	adds	r3, #85	; 0x55
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	212c      	movs	r1, #44	; 0x2c
 8001666:	fb01 f303 	mul.w	r3, r1, r3
 800166a:	4413      	add	r3, r2
 800166c:	3355      	adds	r3, #85	; 0x55
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d109      	bne.n	8001688 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	212c      	movs	r1, #44	; 0x2c
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	4413      	add	r3, r2
 8001680:	3342      	adds	r3, #66	; 0x42
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001686:	e093      	b.n	80017b0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	212c      	movs	r1, #44	; 0x2c
 800168e:	fb01 f303 	mul.w	r3, r1, r3
 8001692:	4413      	add	r3, r2
 8001694:	3342      	adds	r3, #66	; 0x42
 8001696:	2202      	movs	r2, #2
 8001698:	701a      	strb	r2, [r3, #0]
      break;
 800169a:	e089      	b.n	80017b0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d11d      	bne.n	80016de <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	212c      	movs	r1, #44	; 0x2c
 80016a8:	fb01 f303 	mul.w	r3, r1, r3
 80016ac:	4413      	add	r3, r2
 80016ae:	3355      	adds	r3, #85	; 0x55
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	212c      	movs	r1, #44	; 0x2c
 80016bc:	fb01 f303 	mul.w	r3, r1, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	3342      	adds	r3, #66	; 0x42
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016c8:	e073      	b.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	212c      	movs	r1, #44	; 0x2c
 80016d0:	fb01 f303 	mul.w	r3, r1, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	3342      	adds	r3, #66	; 0x42
 80016d8:	2202      	movs	r2, #2
 80016da:	701a      	strb	r2, [r3, #0]
      break;
 80016dc:	e069      	b.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	212c      	movs	r1, #44	; 0x2c
 80016e4:	fb01 f303 	mul.w	r3, r1, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	3354      	adds	r3, #84	; 0x54
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	212c      	movs	r1, #44	; 0x2c
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	3342      	adds	r3, #66	; 0x42
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
      break;
 8001704:	e055      	b.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	212c      	movs	r1, #44	; 0x2c
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	4413      	add	r3, r2
 8001712:	3342      	adds	r3, #66	; 0x42
 8001714:	2202      	movs	r2, #2
 8001716:	701a      	strb	r2, [r3, #0]
      break;
 8001718:	e04b      	b.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800171a:	78bb      	ldrb	r3, [r7, #2]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d11d      	bne.n	800175c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	212c      	movs	r1, #44	; 0x2c
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4413      	add	r3, r2
 800172c:	3355      	adds	r3, #85	; 0x55
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d109      	bne.n	8001748 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	212c      	movs	r1, #44	; 0x2c
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	3342      	adds	r3, #66	; 0x42
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001746:	e034      	b.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	212c      	movs	r1, #44	; 0x2c
 800174e:	fb01 f303 	mul.w	r3, r1, r3
 8001752:	4413      	add	r3, r2
 8001754:	3342      	adds	r3, #66	; 0x42
 8001756:	2202      	movs	r2, #2
 8001758:	701a      	strb	r2, [r3, #0]
      break;
 800175a:	e02a      	b.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	212c      	movs	r1, #44	; 0x2c
 8001762:	fb01 f303 	mul.w	r3, r1, r3
 8001766:	4413      	add	r3, r2
 8001768:	3354      	adds	r3, #84	; 0x54
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d109      	bne.n	8001784 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	212c      	movs	r1, #44	; 0x2c
 8001776:	fb01 f303 	mul.w	r3, r1, r3
 800177a:	4413      	add	r3, r2
 800177c:	3342      	adds	r3, #66	; 0x42
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
      break;
 8001782:	e016      	b.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	212c      	movs	r1, #44	; 0x2c
 800178a:	fb01 f303 	mul.w	r3, r1, r3
 800178e:	4413      	add	r3, r2
 8001790:	3342      	adds	r3, #66	; 0x42
 8001792:	2202      	movs	r2, #2
 8001794:	701a      	strb	r2, [r3, #0]
      break;
 8001796:	e00c      	b.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	212c      	movs	r1, #44	; 0x2c
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	3342      	adds	r3, #66	; 0x42
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
      break;
 80017aa:	e002      	b.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80017ac:	bf00      	nop
 80017ae:	e000      	b.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80017b0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	212c      	movs	r1, #44	; 0x2c
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4413      	add	r3, r2
 80017be:	3344      	adds	r3, #68	; 0x44
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	8b3a      	ldrh	r2, [r7, #24]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	202c      	movs	r0, #44	; 0x2c
 80017cc:	fb00 f303 	mul.w	r3, r0, r3
 80017d0:	440b      	add	r3, r1
 80017d2:	334c      	adds	r3, #76	; 0x4c
 80017d4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	212c      	movs	r1, #44	; 0x2c
 80017dc:	fb01 f303 	mul.w	r3, r1, r3
 80017e0:	4413      	add	r3, r2
 80017e2:	3360      	adds	r3, #96	; 0x60
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	212c      	movs	r1, #44	; 0x2c
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	3350      	adds	r3, #80	; 0x50
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	3339      	adds	r3, #57	; 0x39
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	212c      	movs	r1, #44	; 0x2c
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	4413      	add	r3, r2
 8001818:	3361      	adds	r3, #97	; 0x61
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	222c      	movs	r2, #44	; 0x2c
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	3338      	adds	r3, #56	; 0x38
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	18d1      	adds	r1, r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	f003 fb9e 	bl	8004f78 <USB_HC_StartXfer>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop

08001848 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f003 f8c1 	bl	80049e6 <USB_GetMode>
 8001864:	4603      	mov	r3, r0
 8001866:	2b01      	cmp	r3, #1
 8001868:	f040 80f6 	bne.w	8001a58 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f003 f8a5 	bl	80049c0 <USB_ReadInterrupts>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 80ec 	beq.w	8001a56 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f003 f89c 	bl	80049c0 <USB_ReadInterrupts>
 8001888:	4603      	mov	r3, r0
 800188a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001892:	d104      	bne.n	800189e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800189c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f003 f88c 	bl	80049c0 <USB_ReadInterrupts>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018b2:	d104      	bne.n	80018be <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 f87c 	bl	80049c0 <USB_ReadInterrupts>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018d2:	d104      	bne.n	80018de <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 f86c 	bl	80049c0 <USB_ReadInterrupts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d103      	bne.n	80018fa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2202      	movs	r2, #2
 80018f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 f85e 	bl	80049c0 <USB_ReadInterrupts>
 8001904:	4603      	mov	r3, r0
 8001906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800190a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800190e:	d11c      	bne.n	800194a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001918:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10f      	bne.n	800194a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800192a:	2110      	movs	r1, #16
 800192c:	6938      	ldr	r0, [r7, #16]
 800192e:	f002 ff6d 	bl	800480c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001932:	6938      	ldr	r0, [r7, #16]
 8001934:	f002 ff8e 	bl	8004854 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2101      	movs	r1, #1
 800193e:	4618      	mov	r0, r3
 8001940:	f003 f946 	bl	8004bd0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f005 fe19 	bl	800757c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f003 f836 	bl	80049c0 <USB_ReadInterrupts>
 8001954:	4603      	mov	r3, r0
 8001956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800195a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800195e:	d102      	bne.n	8001966 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f001 fa03 	bl	8002d6c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f003 f828 	bl	80049c0 <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b08      	cmp	r3, #8
 8001978:	d106      	bne.n	8001988 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f005 fde2 	bl	8007544 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2208      	movs	r2, #8
 8001986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f003 f817 	bl	80049c0 <USB_ReadInterrupts>
 8001992:	4603      	mov	r3, r0
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b10      	cmp	r3, #16
 800199a:	d101      	bne.n	80019a0 <HAL_HCD_IRQHandler+0x158>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <HAL_HCD_IRQHandler+0x15a>
 80019a0:	2300      	movs	r3, #0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d012      	beq.n	80019cc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699a      	ldr	r2, [r3, #24]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0210 	bic.w	r2, r2, #16
 80019b4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f001 f906 	bl	8002bc8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699a      	ldr	r2, [r3, #24]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0210 	orr.w	r2, r2, #16
 80019ca:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 fff5 	bl	80049c0 <USB_ReadInterrupts>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019e0:	d13a      	bne.n	8001a58 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fc08 	bl	80051fc <USB_HC_ReadInterrupt>
 80019ec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e025      	b.n	8001a40 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d018      	beq.n	8001a3a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	015a      	lsls	r2, r3, #5
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a1e:	d106      	bne.n	8001a2e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	4619      	mov	r1, r3
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f8ab 	bl	8001b82 <HCD_HC_IN_IRQHandler>
 8001a2c:	e005      	b.n	8001a3a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4619      	mov	r1, r3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 fcc6 	bl	80023c6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d3d4      	bcc.n	80019f4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a52:	615a      	str	r2, [r3, #20]
 8001a54:	e000      	b.n	8001a58 <HAL_HCD_IRQHandler+0x210>
      return;
 8001a56:	bf00      	nop
    }
  }
}
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_HCD_Start+0x16>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e013      	b.n	8001a9c <HAL_HCD_Start+0x3e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2101      	movs	r1, #1
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 f908 	bl	8004c98 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 fe4f 	bl	8004730 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_HCD_Stop+0x16>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e00d      	b.n	8001ad6 <HAL_HCD_Stop+0x32>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f003 fd02 	bl	80054d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 f8aa 	bl	8004c44 <USB_ResetPort>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	212c      	movs	r1, #44	; 0x2c
 8001b0c:	fb01 f303 	mul.w	r3, r1, r3
 8001b10:	4413      	add	r3, r2
 8001b12:	3360      	adds	r3, #96	; 0x60
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	212c      	movs	r1, #44	; 0x2c
 8001b34:	fb01 f303 	mul.w	r3, r1, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	3350      	adds	r3, #80	; 0x50
 8001b3c:	681b      	ldr	r3, [r3, #0]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 f8ee 	bl	8004d38 <USB_GetCurrentFrame>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 f8c9 	bl	8004d0a <USB_GetHostSpeed>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	015a      	lsls	r2, r3, #5
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d119      	bne.n	8001be6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	015a      	lsls	r2, r3, #5
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4413      	add	r3, r2
 8001bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	0151      	lsls	r1, r2, #5
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	440a      	add	r2, r1
 8001bda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bde:	f043 0302 	orr.w	r3, r3, #2
 8001be2:	60d3      	str	r3, [r2, #12]
 8001be4:	e101      	b.n	8001dea <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bfc:	d12b      	bne.n	8001c56 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	212c      	movs	r1, #44	; 0x2c
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3361      	adds	r3, #97	; 0x61
 8001c20:	2207      	movs	r2, #7
 8001c22:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	015a      	lsls	r2, r3, #5
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	0151      	lsls	r1, r2, #5
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	440a      	add	r2, r1
 8001c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fae5 	bl	800521e <USB_HC_Halt>
 8001c54:	e0c9      	b.n	8001dea <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b20      	cmp	r3, #32
 8001c6a:	d109      	bne.n	8001c80 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	015a      	lsls	r2, r3, #5
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	6093      	str	r3, [r2, #8]
 8001c7e:	e0b4      	b.n	8001dea <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	015a      	lsls	r2, r3, #5
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4413      	add	r3, r2
 8001c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d133      	bne.n	8001cfe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	015a      	lsls	r2, r3, #5
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	0151      	lsls	r1, r2, #5
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	440a      	add	r2, r1
 8001cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	212c      	movs	r1, #44	; 0x2c
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3361      	adds	r3, #97	; 0x61
 8001cc4:	2205      	movs	r2, #5
 8001cc6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2308      	movs	r3, #8
 8001cea:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 fa91 	bl	800521e <USB_HC_Halt>
 8001cfc:	e075      	b.n	8001dea <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d14:	d134      	bne.n	8001d80 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	0151      	lsls	r1, r2, #5
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	440a      	add	r2, r1
 8001d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3361      	adds	r3, #97	; 0x61
 8001d44:	2208      	movs	r2, #8
 8001d46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	015a      	lsls	r2, r3, #5
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d54:	461a      	mov	r2, r3
 8001d56:	2310      	movs	r3, #16
 8001d58:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d66:	461a      	mov	r2, r3
 8001d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fa50 	bl	800521e <USB_HC_Halt>
 8001d7e:	e034      	b.n	8001dea <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	2b80      	cmp	r3, #128	; 0x80
 8001d94:	d129      	bne.n	8001dea <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	0151      	lsls	r1, r2, #5
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	440a      	add	r2, r1
 8001dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	212c      	movs	r1, #44	; 0x2c
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3361      	adds	r3, #97	; 0x61
 8001dc4:	2206      	movs	r2, #6
 8001dc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fa23 	bl	800521e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	015a      	lsls	r2, r3, #5
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de4:	461a      	mov	r2, r3
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e00:	d122      	bne.n	8001e48 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	0151      	lsls	r1, r2, #5
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	440a      	add	r2, r1
 8001e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 f9f6 	bl	800521e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e44:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e46:	e2ba      	b.n	80023be <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	f040 811b 	bne.w	8002096 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d019      	beq.n	8001e9c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	212c      	movs	r1, #44	; 0x2c
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	3348      	adds	r3, #72	; 0x48
 8001e76:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	0159      	lsls	r1, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	440b      	add	r3, r1
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e8a:	1ad2      	subs	r2, r2, r3
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	202c      	movs	r0, #44	; 0x2c
 8001e92:	fb00 f303 	mul.w	r3, r0, r3
 8001e96:	440b      	add	r3, r1
 8001e98:	3350      	adds	r3, #80	; 0x50
 8001e9a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	212c      	movs	r1, #44	; 0x2c
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3361      	adds	r3, #97	; 0x61
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	212c      	movs	r1, #44	; 0x2c
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	335c      	adds	r3, #92	; 0x5c
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2301      	movs	r3, #1
 8001ed0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	212c      	movs	r1, #44	; 0x2c
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	333f      	adds	r3, #63	; 0x3f
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	212c      	movs	r1, #44	; 0x2c
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	333f      	adds	r3, #63	; 0x3f
 8001ef4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d121      	bne.n	8001f3e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	0151      	lsls	r1, r2, #5
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	440a      	add	r2, r1
 8001f10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 f97a 	bl	800521e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	461a      	mov	r2, r3
 8001f38:	2310      	movs	r3, #16
 8001f3a:	6093      	str	r3, [r2, #8]
 8001f3c:	e066      	b.n	800200c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	333f      	adds	r3, #63	; 0x3f
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d127      	bne.n	8001fa2 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	0151      	lsls	r1, r2, #5
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	440a      	add	r2, r1
 8001f68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f70:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	212c      	movs	r1, #44	; 0x2c
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3360      	adds	r3, #96	; 0x60
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	b2d9      	uxtb	r1, r3
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	202c      	movs	r0, #44	; 0x2c
 8001f8e:	fb00 f303 	mul.w	r3, r0, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	3360      	adds	r3, #96	; 0x60
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f005 fafc 	bl	8007598 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001fa0:	e034      	b.n	800200c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	333f      	adds	r3, #63	; 0x3f
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d12a      	bne.n	800200c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	212c      	movs	r1, #44	; 0x2c
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3360      	adds	r3, #96	; 0x60
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3354      	adds	r3, #84	; 0x54
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2d8      	uxtb	r0, r3
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	212c      	movs	r1, #44	; 0x2c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3354      	adds	r3, #84	; 0x54
 8001fec:	4602      	mov	r2, r0
 8001fee:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	b2d9      	uxtb	r1, r3
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	202c      	movs	r0, #44	; 0x2c
 8001ffa:	fb00 f303 	mul.w	r3, r0, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	3360      	adds	r3, #96	; 0x60
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f005 fac6 	bl	8007598 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d12b      	bne.n	800206c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	3348      	adds	r3, #72	; 0x48
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	202c      	movs	r0, #44	; 0x2c
 800202a:	fb00 f202 	mul.w	r2, r0, r2
 800202e:	440a      	add	r2, r1
 8002030:	3240      	adds	r2, #64	; 0x40
 8002032:	8812      	ldrh	r2, [r2, #0]
 8002034:	fbb3 f3f2 	udiv	r3, r3, r2
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 81be 	beq.w	80023be <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	212c      	movs	r1, #44	; 0x2c
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	4413      	add	r3, r2
 800204e:	3354      	adds	r3, #84	; 0x54
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	f083 0301 	eor.w	r3, r3, #1
 8002056:	b2d8      	uxtb	r0, r3
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	212c      	movs	r1, #44	; 0x2c
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	3354      	adds	r3, #84	; 0x54
 8002066:	4602      	mov	r2, r0
 8002068:	701a      	strb	r2, [r3, #0]
}
 800206a:	e1a8      	b.n	80023be <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3354      	adds	r3, #84	; 0x54
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	f083 0301 	eor.w	r3, r3, #1
 8002080:	b2d8      	uxtb	r0, r3
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3354      	adds	r3, #84	; 0x54
 8002090:	4602      	mov	r2, r0
 8002092:	701a      	strb	r2, [r3, #0]
}
 8002094:	e193      	b.n	80023be <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	f040 8106 	bne.w	80022ba <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	015a      	lsls	r2, r3, #5
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4413      	add	r3, r2
 80020b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	0151      	lsls	r1, r2, #5
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	440a      	add	r2, r1
 80020c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020c8:	f023 0302 	bic.w	r3, r3, #2
 80020cc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	3361      	adds	r3, #97	; 0x61
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d109      	bne.n	80020f6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	212c      	movs	r1, #44	; 0x2c
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	3360      	adds	r3, #96	; 0x60
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	e0c9      	b.n	800228a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	212c      	movs	r1, #44	; 0x2c
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	4413      	add	r3, r2
 8002102:	3361      	adds	r3, #97	; 0x61
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b05      	cmp	r3, #5
 8002108:	d109      	bne.n	800211e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	3360      	adds	r3, #96	; 0x60
 8002118:	2205      	movs	r2, #5
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	e0b5      	b.n	800228a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	212c      	movs	r1, #44	; 0x2c
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	3361      	adds	r3, #97	; 0x61
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b06      	cmp	r3, #6
 8002130:	d009      	beq.n	8002146 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	212c      	movs	r1, #44	; 0x2c
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	4413      	add	r3, r2
 800213e:	3361      	adds	r3, #97	; 0x61
 8002140:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002142:	2b08      	cmp	r3, #8
 8002144:	d150      	bne.n	80021e8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	212c      	movs	r1, #44	; 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	335c      	adds	r3, #92	; 0x5c
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	202c      	movs	r0, #44	; 0x2c
 800215e:	fb00 f303 	mul.w	r3, r0, r3
 8002162:	440b      	add	r3, r1
 8002164:	335c      	adds	r3, #92	; 0x5c
 8002166:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	212c      	movs	r1, #44	; 0x2c
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	335c      	adds	r3, #92	; 0x5c
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d912      	bls.n	80021a2 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	335c      	adds	r3, #92	; 0x5c
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	212c      	movs	r1, #44	; 0x2c
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	4413      	add	r3, r2
 800219a:	3360      	adds	r3, #96	; 0x60
 800219c:	2204      	movs	r2, #4
 800219e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021a0:	e073      	b.n	800228a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	3360      	adds	r3, #96	; 0x60
 80021b0:	2202      	movs	r2, #2
 80021b2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021ca:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021d2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e0:	461a      	mov	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021e6:	e050      	b.n	800228a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3361      	adds	r3, #97	; 0x61
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d122      	bne.n	8002242 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	3360      	adds	r3, #96	; 0x60
 800220a:	2202      	movs	r2, #2
 800220c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4413      	add	r3, r2
 8002216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002224:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800222c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4413      	add	r3, r2
 8002236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223a:	461a      	mov	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e023      	b.n	800228a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	212c      	movs	r1, #44	; 0x2c
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	4413      	add	r3, r2
 800224e:	3361      	adds	r3, #97	; 0x61
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b07      	cmp	r3, #7
 8002254:	d119      	bne.n	800228a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	212c      	movs	r1, #44	; 0x2c
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4413      	add	r3, r2
 8002262:	335c      	adds	r3, #92	; 0x5c
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	202c      	movs	r0, #44	; 0x2c
 800226e:	fb00 f303 	mul.w	r3, r0, r3
 8002272:	440b      	add	r3, r1
 8002274:	335c      	adds	r3, #92	; 0x5c
 8002276:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	212c      	movs	r1, #44	; 0x2c
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	4413      	add	r3, r2
 8002284:	3360      	adds	r3, #96	; 0x60
 8002286:	2204      	movs	r2, #4
 8002288:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002296:	461a      	mov	r2, r3
 8002298:	2302      	movs	r3, #2
 800229a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	b2d9      	uxtb	r1, r3
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	202c      	movs	r0, #44	; 0x2c
 80022a6:	fb00 f303 	mul.w	r3, r0, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3360      	adds	r3, #96	; 0x60
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f005 f970 	bl	8007598 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022b8:	e081      	b.n	80023be <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b10      	cmp	r3, #16
 80022ce:	d176      	bne.n	80023be <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	212c      	movs	r1, #44	; 0x2c
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	333f      	adds	r3, #63	; 0x3f
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d121      	bne.n	8002328 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	335c      	adds	r3, #92	; 0x5c
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	0151      	lsls	r1, r2, #5
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	440a      	add	r2, r1
 800230c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f002 ff7c 	bl	800521e <USB_HC_Halt>
 8002326:	e041      	b.n	80023ac <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	333f      	adds	r3, #63	; 0x3f
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d009      	beq.n	8002350 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	212c      	movs	r1, #44	; 0x2c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	333f      	adds	r3, #63	; 0x3f
 800234a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800234c:	2b02      	cmp	r3, #2
 800234e:	d12d      	bne.n	80023ac <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	335c      	adds	r3, #92	; 0x5c
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d120      	bne.n	80023ac <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	212c      	movs	r1, #44	; 0x2c
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	3361      	adds	r3, #97	; 0x61
 8002378:	2203      	movs	r2, #3
 800237a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	0151      	lsls	r1, r2, #5
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	440a      	add	r2, r1
 8002392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f002 ff39 	bl	800521e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b8:	461a      	mov	r2, r3
 80023ba:	2310      	movs	r3, #16
 80023bc:	6093      	str	r3, [r2, #8]
}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b088      	sub	sp, #32
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	460b      	mov	r3, r1
 80023d0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d119      	bne.n	800242a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002402:	461a      	mov	r2, r3
 8002404:	2304      	movs	r3, #4
 8002406:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	0151      	lsls	r1, r2, #5
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	440a      	add	r2, r1
 800241e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002422:	f043 0302 	orr.w	r3, r3, #2
 8002426:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002428:	e3ca      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b20      	cmp	r3, #32
 800243e:	d13e      	bne.n	80024be <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	461a      	mov	r2, r3
 800244e:	2320      	movs	r3, #32
 8002450:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	212c      	movs	r1, #44	; 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	333d      	adds	r3, #61	; 0x3d
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	f040 83ac 	bne.w	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	212c      	movs	r1, #44	; 0x2c
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	4413      	add	r3, r2
 8002474:	333d      	adds	r3, #61	; 0x3d
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	3360      	adds	r3, #96	; 0x60
 8002488:	2202      	movs	r2, #2
 800248a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	0151      	lsls	r1, r2, #5
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	440a      	add	r2, r1
 80024a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a6:	f043 0302 	orr.w	r3, r3, #2
 80024aa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f002 feb1 	bl	800521e <USB_HC_Halt>
}
 80024bc:	e380      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d4:	d122      	bne.n	800251c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	0151      	lsls	r1, r2, #5
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	440a      	add	r2, r1
 80024ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f002 fe8c 	bl	800521e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	461a      	mov	r2, r3
 8002514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002518:	6093      	str	r3, [r2, #8]
}
 800251a:	e351      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b01      	cmp	r3, #1
 8002530:	d150      	bne.n	80025d4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	335c      	adds	r3, #92	; 0x5c
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d111      	bne.n	800257e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	333d      	adds	r3, #61	; 0x3d
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002578:	461a      	mov	r2, r3
 800257a:	2340      	movs	r3, #64	; 0x40
 800257c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4413      	add	r3, r2
 8002586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	0151      	lsls	r1, r2, #5
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	440a      	add	r2, r1
 8002594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 fe38 	bl	800521e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	461a      	mov	r2, r3
 80025bc:	2301      	movs	r3, #1
 80025be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	3361      	adds	r3, #97	; 0x61
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
}
 80025d2:	e2f5      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	d13c      	bne.n	8002664 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	3361      	adds	r3, #97	; 0x61
 80025f8:	2204      	movs	r2, #4
 80025fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	333d      	adds	r3, #61	; 0x3d
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	335c      	adds	r3, #92	; 0x5c
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	0151      	lsls	r1, r2, #5
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	440a      	add	r2, r1
 8002636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800263a:	f043 0302 	orr.w	r3, r3, #2
 800263e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f002 fde7 	bl	800521e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	461a      	mov	r2, r3
 800265e:	2340      	movs	r3, #64	; 0x40
 8002660:	6093      	str	r3, [r2, #8]
}
 8002662:	e2ad      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b08      	cmp	r3, #8
 8002678:	d12a      	bne.n	80026d0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	461a      	mov	r2, r3
 8002688:	2308      	movs	r3, #8
 800268a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	0151      	lsls	r1, r2, #5
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	440a      	add	r2, r1
 80026a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f002 fdb1 	bl	800521e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	3361      	adds	r3, #97	; 0x61
 80026ca:	2205      	movs	r2, #5
 80026cc:	701a      	strb	r2, [r3, #0]
}
 80026ce:	e277      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d150      	bne.n	8002788 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	335c      	adds	r3, #92	; 0x5c
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	212c      	movs	r1, #44	; 0x2c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	3361      	adds	r3, #97	; 0x61
 8002706:	2203      	movs	r2, #3
 8002708:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	333d      	adds	r3, #61	; 0x3d
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d112      	bne.n	8002744 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	333c      	adds	r3, #60	; 0x3c
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d108      	bne.n	8002744 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	333d      	adds	r3, #61	; 0x3d
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	0151      	lsls	r1, r2, #5
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	440a      	add	r2, r1
 800275a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f002 fd55 	bl	800521e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	461a      	mov	r2, r3
 8002782:	2310      	movs	r3, #16
 8002784:	6093      	str	r3, [r2, #8]
}
 8002786:	e21b      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279a:	2b80      	cmp	r3, #128	; 0x80
 800279c:	d174      	bne.n	8002888 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d121      	bne.n	80027ea <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3361      	adds	r3, #97	; 0x61
 80027b4:	2206      	movs	r2, #6
 80027b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	0151      	lsls	r1, r2, #5
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	440a      	add	r2, r1
 80027ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d2:	f043 0302 	orr.w	r3, r3, #2
 80027d6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 fd1b 	bl	800521e <USB_HC_Halt>
 80027e8:	e044      	b.n	8002874 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	212c      	movs	r1, #44	; 0x2c
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	335c      	adds	r3, #92	; 0x5c
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	202c      	movs	r0, #44	; 0x2c
 8002802:	fb00 f303 	mul.w	r3, r0, r3
 8002806:	440b      	add	r3, r1
 8002808:	335c      	adds	r3, #92	; 0x5c
 800280a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	212c      	movs	r1, #44	; 0x2c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	335c      	adds	r3, #92	; 0x5c
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d920      	bls.n	8002862 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	335c      	adds	r3, #92	; 0x5c
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	3360      	adds	r3, #96	; 0x60
 8002840:	2204      	movs	r2, #4
 8002842:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	b2d9      	uxtb	r1, r3
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	202c      	movs	r0, #44	; 0x2c
 800284e:	fb00 f303 	mul.w	r3, r0, r3
 8002852:	4413      	add	r3, r2
 8002854:	3360      	adds	r3, #96	; 0x60
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f004 fe9c 	bl	8007598 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002860:	e008      	b.n	8002874 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3360      	adds	r3, #96	; 0x60
 8002870:	2202      	movs	r2, #2
 8002872:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	461a      	mov	r2, r3
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	6093      	str	r3, [r2, #8]
}
 8002886:	e19b      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289e:	d134      	bne.n	800290a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	0151      	lsls	r1, r2, #5
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	440a      	add	r2, r1
 80028b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ba:	f043 0302 	orr.w	r3, r3, #2
 80028be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f002 fca7 	bl	800521e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	461a      	mov	r2, r3
 80028de:	2310      	movs	r3, #16
 80028e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ee:	461a      	mov	r2, r3
 80028f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	3361      	adds	r3, #97	; 0x61
 8002904:	2208      	movs	r2, #8
 8002906:	701a      	strb	r2, [r3, #0]
}
 8002908:	e15a      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b02      	cmp	r3, #2
 800291e:	f040 814f 	bne.w	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	0151      	lsls	r1, r2, #5
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	440a      	add	r2, r1
 8002938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800293c:	f023 0302 	bic.w	r3, r3, #2
 8002940:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	3361      	adds	r3, #97	; 0x61
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d17d      	bne.n	8002a52 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	3360      	adds	r3, #96	; 0x60
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	333f      	adds	r3, #63	; 0x3f
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d00a      	beq.n	8002992 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	333f      	adds	r3, #63	; 0x3f
 800298a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800298c:	2b03      	cmp	r3, #3
 800298e:	f040 8100 	bne.w	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d113      	bne.n	80029c2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3355      	adds	r3, #85	; 0x55
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	f083 0301 	eor.w	r3, r3, #1
 80029ae:	b2d8      	uxtb	r0, r3
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3355      	adds	r3, #85	; 0x55
 80029be:	4602      	mov	r2, r0
 80029c0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f040 80e3 	bne.w	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	334c      	adds	r3, #76	; 0x4c
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80d8 	beq.w	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	334c      	adds	r3, #76	; 0x4c
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	202c      	movs	r0, #44	; 0x2c
 80029f8:	fb00 f202 	mul.w	r2, r0, r2
 80029fc:	440a      	add	r2, r1
 80029fe:	3240      	adds	r2, #64	; 0x40
 8002a00:	8812      	ldrh	r2, [r2, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	3b01      	subs	r3, #1
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	202c      	movs	r0, #44	; 0x2c
 8002a0c:	fb00 f202 	mul.w	r2, r0, r2
 8002a10:	440a      	add	r2, r1
 8002a12:	3240      	adds	r2, #64	; 0x40
 8002a14:	8812      	ldrh	r2, [r2, #0]
 8002a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80b5 	beq.w	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3355      	adds	r3, #85	; 0x55
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	f083 0301 	eor.w	r3, r3, #1
 8002a3c:	b2d8      	uxtb	r0, r3
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	212c      	movs	r1, #44	; 0x2c
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	3355      	adds	r3, #85	; 0x55
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e09f      	b.n	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	212c      	movs	r1, #44	; 0x2c
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3361      	adds	r3, #97	; 0x61
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d109      	bne.n	8002a7a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	3360      	adds	r3, #96	; 0x60
 8002a74:	2202      	movs	r2, #2
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e08b      	b.n	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	3361      	adds	r3, #97	; 0x61
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d109      	bne.n	8002aa2 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	3360      	adds	r3, #96	; 0x60
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	e077      	b.n	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	3361      	adds	r3, #97	; 0x61
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d109      	bne.n	8002aca <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3360      	adds	r3, #96	; 0x60
 8002ac4:	2205      	movs	r2, #5
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e063      	b.n	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3361      	adds	r3, #97	; 0x61
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d009      	beq.n	8002af2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3361      	adds	r3, #97	; 0x61
 8002aec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d14f      	bne.n	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	335c      	adds	r3, #92	; 0x5c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	202c      	movs	r0, #44	; 0x2c
 8002b0a:	fb00 f303 	mul.w	r3, r0, r3
 8002b0e:	440b      	add	r3, r1
 8002b10:	335c      	adds	r3, #92	; 0x5c
 8002b12:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	335c      	adds	r3, #92	; 0x5c
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d912      	bls.n	8002b4e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	335c      	adds	r3, #92	; 0x5c
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	3360      	adds	r3, #96	; 0x60
 8002b48:	2204      	movs	r2, #4
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	e021      	b.n	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	3360      	adds	r3, #96	; 0x60
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b76:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b7e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	b2d9      	uxtb	r1, r3
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	202c      	movs	r0, #44	; 0x2c
 8002bae:	fb00 f303 	mul.w	r3, r0, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3360      	adds	r3, #96	; 0x60
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f004 fcec 	bl	8007598 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bc0:	bf00      	nop
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	0c5b      	lsrs	r3, r3, #17
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bfc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d004      	beq.n	8002c0e <HCD_RXQLVL_IRQHandler+0x46>
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2b05      	cmp	r3, #5
 8002c08:	f000 80a9 	beq.w	8002d5e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c0c:	e0aa      	b.n	8002d64 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a6 	beq.w	8002d62 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	3344      	adds	r3, #68	; 0x44
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 809b 	beq.w	8002d62 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3350      	adds	r3, #80	; 0x50
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	441a      	add	r2, r3
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	202c      	movs	r0, #44	; 0x2c
 8002c46:	fb00 f303 	mul.w	r3, r0, r3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	334c      	adds	r3, #76	; 0x4c
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d87a      	bhi.n	8002d4a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3344      	adds	r3, #68	; 0x44
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	b292      	uxth	r2, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f001 fe4f 	bl	8004910 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3344      	adds	r3, #68	; 0x44
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	441a      	add	r2, r3
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	202c      	movs	r0, #44	; 0x2c
 8002c8c:	fb00 f303 	mul.w	r3, r0, r3
 8002c90:	440b      	add	r3, r1
 8002c92:	3344      	adds	r3, #68	; 0x44
 8002c94:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3350      	adds	r3, #80	; 0x50
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	441a      	add	r2, r3
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	202c      	movs	r0, #44	; 0x2c
 8002cb0:	fb00 f303 	mul.w	r3, r0, r3
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3350      	adds	r3, #80	; 0x50
 8002cb8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	0cdb      	lsrs	r3, r3, #19
 8002cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cce:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3340      	adds	r3, #64	; 0x40
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d13c      	bne.n	8002d62 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d039      	beq.n	8002d62 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d04:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d0c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3354      	adds	r3, #84	; 0x54
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	f083 0301 	eor.w	r3, r3, #1
 8002d34:	b2d8      	uxtb	r0, r3
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3354      	adds	r3, #84	; 0x54
 8002d44:	4602      	mov	r2, r0
 8002d46:	701a      	strb	r2, [r3, #0]
      break;
 8002d48:	e00b      	b.n	8002d62 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	3360      	adds	r3, #96	; 0x60
 8002d58:	2204      	movs	r2, #4
 8002d5a:	701a      	strb	r2, [r3, #0]
      break;
 8002d5c:	e001      	b.n	8002d62 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d62:	bf00      	nop
  }
}
 8002d64:	bf00      	nop
 8002d66:	3728      	adds	r7, #40	; 0x28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d98:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d10b      	bne.n	8002dbc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d102      	bne.n	8002db4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f004 fbd6 	bl	8007560 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f043 0302 	orr.w	r3, r3, #2
 8002dba:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d132      	bne.n	8002e2c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f043 0308 	orr.w	r3, r3, #8
 8002dcc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d126      	bne.n	8002e26 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d113      	bne.n	8002e08 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dea:	d106      	bne.n	8002dfa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2102      	movs	r1, #2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 feec 	bl	8004bd0 <USB_InitFSLSPClkSel>
 8002df8:	e011      	b.n	8002e1e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2101      	movs	r1, #1
 8002e00:	4618      	mov	r0, r3
 8002e02:	f001 fee5 	bl	8004bd0 <USB_InitFSLSPClkSel>
 8002e06:	e00a      	b.n	8002e1e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d106      	bne.n	8002e1e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e16:	461a      	mov	r2, r3
 8002e18:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e1c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f004 fbc8 	bl	80075b4 <HAL_HCD_PortEnabled_Callback>
 8002e24:	e002      	b.n	8002e2c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f004 fbd2 	bl	80075d0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d103      	bne.n	8002e3e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f043 0320 	orr.w	r3, r3, #32
 8002e3c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e44:	461a      	mov	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	6013      	str	r3, [r2, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e12b      	b.n	80030be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd fd66 	bl	800094c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2224      	movs	r2, #36	; 0x24
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0201 	bic.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ea6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eb8:	f001 f9fc 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 8002ebc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4a81      	ldr	r2, [pc, #516]	; (80030c8 <HAL_I2C_Init+0x274>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d807      	bhi.n	8002ed8 <HAL_I2C_Init+0x84>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a80      	ldr	r2, [pc, #512]	; (80030cc <HAL_I2C_Init+0x278>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	bf94      	ite	ls
 8002ed0:	2301      	movls	r3, #1
 8002ed2:	2300      	movhi	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e006      	b.n	8002ee6 <HAL_I2C_Init+0x92>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a7d      	ldr	r2, [pc, #500]	; (80030d0 <HAL_I2C_Init+0x27c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	bf94      	ite	ls
 8002ee0:	2301      	movls	r3, #1
 8002ee2:	2300      	movhi	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0e7      	b.n	80030be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4a78      	ldr	r2, [pc, #480]	; (80030d4 <HAL_I2C_Init+0x280>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0c9b      	lsrs	r3, r3, #18
 8002ef8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a6a      	ldr	r2, [pc, #424]	; (80030c8 <HAL_I2C_Init+0x274>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d802      	bhi.n	8002f28 <HAL_I2C_Init+0xd4>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	3301      	adds	r3, #1
 8002f26:	e009      	b.n	8002f3c <HAL_I2C_Init+0xe8>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	4a69      	ldr	r2, [pc, #420]	; (80030d8 <HAL_I2C_Init+0x284>)
 8002f34:	fba2 2303 	umull	r2, r3, r2, r3
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	495c      	ldr	r1, [pc, #368]	; (80030c8 <HAL_I2C_Init+0x274>)
 8002f58:	428b      	cmp	r3, r1
 8002f5a:	d819      	bhi.n	8002f90 <HAL_I2C_Init+0x13c>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e59      	subs	r1, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f6a:	1c59      	adds	r1, r3, #1
 8002f6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f70:	400b      	ands	r3, r1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_I2C_Init+0x138>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1e59      	subs	r1, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8a:	e051      	b.n	8003030 <HAL_I2C_Init+0x1dc>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	e04f      	b.n	8003030 <HAL_I2C_Init+0x1dc>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d111      	bne.n	8002fbc <HAL_I2C_Init+0x168>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1e58      	subs	r0, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	440b      	add	r3, r1
 8002fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002faa:	3301      	adds	r3, #1
 8002fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e012      	b.n	8002fe2 <HAL_I2C_Init+0x18e>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1e58      	subs	r0, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	0099      	lsls	r1, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Init+0x196>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e022      	b.n	8003030 <HAL_I2C_Init+0x1dc>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10e      	bne.n	8003010 <HAL_I2C_Init+0x1bc>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1e58      	subs	r0, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6859      	ldr	r1, [r3, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	440b      	add	r3, r1
 8003000:	fbb0 f3f3 	udiv	r3, r0, r3
 8003004:	3301      	adds	r3, #1
 8003006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800300e:	e00f      	b.n	8003030 <HAL_I2C_Init+0x1dc>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1e58      	subs	r0, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	0099      	lsls	r1, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	fbb0 f3f3 	udiv	r3, r0, r3
 8003026:	3301      	adds	r3, #1
 8003028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	6809      	ldr	r1, [r1, #0]
 8003034:	4313      	orrs	r3, r2
 8003036:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69da      	ldr	r2, [r3, #28]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800305e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6911      	ldr	r1, [r2, #16]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68d2      	ldr	r2, [r2, #12]
 800306a:	4311      	orrs	r1, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	430b      	orrs	r3, r1
 8003072:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	000186a0 	.word	0x000186a0
 80030cc:	001e847f 	.word	0x001e847f
 80030d0:	003d08ff 	.word	0x003d08ff
 80030d4:	431bde83 	.word	0x431bde83
 80030d8:	10624dd3 	.word	0x10624dd3

080030dc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e128      	b.n	8003340 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a90      	ldr	r2, [pc, #576]	; (8003348 <HAL_I2S_Init+0x26c>)
 8003106:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7fd fc67 	bl	80009dc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2202      	movs	r2, #2
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003124:	f023 030f 	bic.w	r3, r3, #15
 8003128:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2202      	movs	r2, #2
 8003130:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d060      	beq.n	80031fc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003142:	2310      	movs	r3, #16
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	e001      	b.n	800314c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003148:	2320      	movs	r3, #32
 800314a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b20      	cmp	r3, #32
 8003152:	d802      	bhi.n	800315a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800315a:	2001      	movs	r0, #1
 800315c:	f001 f9a0 	bl	80044a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003160:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316a:	d125      	bne.n	80031b8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d010      	beq.n	8003196 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	fbb2 f2f3 	udiv	r2, r2, r3
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	461a      	mov	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	3305      	adds	r3, #5
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	e01f      	b.n	80031d6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	461a      	mov	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	3305      	adds	r3, #5
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	e00e      	b.n	80031d6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	461a      	mov	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d2:	3305      	adds	r3, #5
 80031d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4a5c      	ldr	r2, [pc, #368]	; (800334c <HAL_I2S_Init+0x270>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	08db      	lsrs	r3, r3, #3
 80031e0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	085b      	lsrs	r3, r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	e003      	b.n	8003204 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031fc:	2302      	movs	r3, #2
 80031fe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d902      	bls.n	8003210 <HAL_I2S_Init+0x134>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	2bff      	cmp	r3, #255	; 0xff
 800320e:	d907      	bls.n	8003220 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003214:	f043 0210 	orr.w	r2, r3, #16
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e08f      	b.n	8003340 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	ea42 0103 	orr.w	r1, r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	430a      	orrs	r2, r1
 8003232:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800323e:	f023 030f 	bic.w	r3, r3, #15
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6851      	ldr	r1, [r2, #4]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6892      	ldr	r2, [r2, #8]
 800324a:	4311      	orrs	r1, r2
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	68d2      	ldr	r2, [r2, #12]
 8003250:	4311      	orrs	r1, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6992      	ldr	r2, [r2, #24]
 8003256:	430a      	orrs	r2, r1
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003262:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d161      	bne.n	8003330 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a38      	ldr	r2, [pc, #224]	; (8003350 <HAL_I2S_Init+0x274>)
 8003270:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a37      	ldr	r2, [pc, #220]	; (8003354 <HAL_I2S_Init+0x278>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d101      	bne.n	8003280 <HAL_I2S_Init+0x1a4>
 800327c:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_I2S_Init+0x27c>)
 800327e:	e001      	b.n	8003284 <HAL_I2S_Init+0x1a8>
 8003280:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	4932      	ldr	r1, [pc, #200]	; (8003354 <HAL_I2S_Init+0x278>)
 800328c:	428a      	cmp	r2, r1
 800328e:	d101      	bne.n	8003294 <HAL_I2S_Init+0x1b8>
 8003290:	4a31      	ldr	r2, [pc, #196]	; (8003358 <HAL_I2S_Init+0x27c>)
 8003292:	e001      	b.n	8003298 <HAL_I2S_Init+0x1bc>
 8003294:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003298:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800329c:	f023 030f 	bic.w	r3, r3, #15
 80032a0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a2b      	ldr	r2, [pc, #172]	; (8003354 <HAL_I2S_Init+0x278>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d101      	bne.n	80032b0 <HAL_I2S_Init+0x1d4>
 80032ac:	4b2a      	ldr	r3, [pc, #168]	; (8003358 <HAL_I2S_Init+0x27c>)
 80032ae:	e001      	b.n	80032b4 <HAL_I2S_Init+0x1d8>
 80032b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032b4:	2202      	movs	r2, #2
 80032b6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a25      	ldr	r2, [pc, #148]	; (8003354 <HAL_I2S_Init+0x278>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_I2S_Init+0x1ea>
 80032c2:	4b25      	ldr	r3, [pc, #148]	; (8003358 <HAL_I2S_Init+0x27c>)
 80032c4:	e001      	b.n	80032ca <HAL_I2S_Init+0x1ee>
 80032c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d6:	d003      	beq.n	80032e0 <HAL_I2S_Init+0x204>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d103      	bne.n	80032e8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	e001      	b.n	80032ec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032e8:	2300      	movs	r3, #0
 80032ea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032f6:	4313      	orrs	r3, r2
 80032f8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003300:	4313      	orrs	r3, r2
 8003302:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800330a:	4313      	orrs	r3, r2
 800330c:	b29a      	uxth	r2, r3
 800330e:	897b      	ldrh	r3, [r7, #10]
 8003310:	4313      	orrs	r3, r2
 8003312:	b29b      	uxth	r3, r3
 8003314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003318:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a0d      	ldr	r2, [pc, #52]	; (8003354 <HAL_I2S_Init+0x278>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_I2S_Init+0x24c>
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <HAL_I2S_Init+0x27c>)
 8003326:	e001      	b.n	800332c <HAL_I2S_Init+0x250>
 8003328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800332c:	897a      	ldrh	r2, [r7, #10]
 800332e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3720      	adds	r7, #32
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	08003453 	.word	0x08003453
 800334c:	cccccccd 	.word	0xcccccccd
 8003350:	08003569 	.word	0x08003569
 8003354:	40003800 	.word	0x40003800
 8003358:	40003400 	.word	0x40003400

0800335c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	881a      	ldrh	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	1c9a      	adds	r2, r3, #2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033dc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ffb8 	bl	800335c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	b292      	uxth	r2, r2
 8003408:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	1c9a      	adds	r2, r3, #2
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10e      	bne.n	800344a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800343a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff ff93 	bl	8003370 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b086      	sub	sp, #24
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b04      	cmp	r3, #4
 800346c:	d13a      	bne.n	80034e4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d109      	bne.n	800348c <I2S_IRQHandler+0x3a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b40      	cmp	r3, #64	; 0x40
 8003484:	d102      	bne.n	800348c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ffb4 	bl	80033f4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d126      	bne.n	80034e4 <I2S_IRQHandler+0x92>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d11f      	bne.n	80034e4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034b4:	2300      	movs	r3, #0
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	f043 0202 	orr.w	r2, r3, #2
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff ff50 	bl	8003384 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d136      	bne.n	800355e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d109      	bne.n	800350e <I2S_IRQHandler+0xbc>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003504:	2b80      	cmp	r3, #128	; 0x80
 8003506:	d102      	bne.n	800350e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ff45 	bl	8003398 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b08      	cmp	r3, #8
 8003516:	d122      	bne.n	800355e <I2S_IRQHandler+0x10c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b20      	cmp	r3, #32
 8003524:	d11b      	bne.n	800355e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003534:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	f043 0204 	orr.w	r2, r3, #4
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ff13 	bl	8003384 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800355e:	bf00      	nop
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4aa2      	ldr	r2, [pc, #648]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003582:	4ba2      	ldr	r3, [pc, #648]	; (800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003584:	e001      	b.n	800358a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003586:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a9b      	ldr	r2, [pc, #620]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035a0:	4b9a      	ldr	r3, [pc, #616]	; (800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035a2:	e001      	b.n	80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b4:	d004      	beq.n	80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f040 8099 	bne.w	80036f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d107      	bne.n	80035da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f925 	bl	8003824 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d107      	bne.n	80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f9c8 	bl	8003984 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fa:	2b40      	cmp	r3, #64	; 0x40
 80035fc:	d13a      	bne.n	8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d035      	beq.n	8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a7e      	ldr	r2, [pc, #504]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d101      	bne.n	8003616 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003612:	4b7e      	ldr	r3, [pc, #504]	; (800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003614:	e001      	b.n	800361a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003616:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4979      	ldr	r1, [pc, #484]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003622:	428b      	cmp	r3, r1
 8003624:	d101      	bne.n	800362a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003626:	4b79      	ldr	r3, [pc, #484]	; (800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003628:	e001      	b.n	800362e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800362a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800362e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003632:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003642:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	f043 0202 	orr.w	r2, r3, #2
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fe88 	bl	8003384 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b08      	cmp	r3, #8
 800367c:	f040 80be 	bne.w	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80b8 	beq.w	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800369a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a59      	ldr	r2, [pc, #356]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036a6:	4b59      	ldr	r3, [pc, #356]	; (800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036a8:	e001      	b.n	80036ae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4954      	ldr	r1, [pc, #336]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036b6:	428b      	cmp	r3, r1
 80036b8:	d101      	bne.n	80036be <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036ba:	4b54      	ldr	r3, [pc, #336]	; (800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036bc:	e001      	b.n	80036c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036c6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036c8:	2300      	movs	r3, #0
 80036ca:	60bb      	str	r3, [r7, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	f043 0204 	orr.w	r2, r3, #4
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fe4a 	bl	8003384 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036f0:	e084      	b.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d107      	bne.n	800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f8be 	bl	8003888 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b01      	cmp	r3, #1
 8003714:	d107      	bne.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f8fd 	bl	8003920 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d12f      	bne.n	8003790 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d02a      	beq.n	8003790 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003748:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2e      	ldr	r2, [pc, #184]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d101      	bne.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003754:	4b2d      	ldr	r3, [pc, #180]	; (800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003756:	e001      	b.n	800375c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003758:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4929      	ldr	r1, [pc, #164]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003764:	428b      	cmp	r3, r1
 8003766:	d101      	bne.n	800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003768:	4b28      	ldr	r3, [pc, #160]	; (800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800376a:	e001      	b.n	8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800376c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003770:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003774:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	f043 0202 	orr.w	r2, r3, #2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff fdfa 	bl	8003384 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b08      	cmp	r3, #8
 8003798:	d131      	bne.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d02c      	beq.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a17      	ldr	r2, [pc, #92]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d101      	bne.n	80037b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037ae:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037b0:	e001      	b.n	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4912      	ldr	r1, [pc, #72]	; (8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037be:	428b      	cmp	r3, r1
 80037c0:	d101      	bne.n	80037c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80037c2:	4b12      	ldr	r3, [pc, #72]	; (800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037c4:	e001      	b.n	80037ca <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80037c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037de:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ec:	f043 0204 	orr.w	r2, r3, #4
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff fdc5 	bl	8003384 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037fa:	e000      	b.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037fc:	bf00      	nop
}
 80037fe:	bf00      	nop
 8003800:	3720      	adds	r7, #32
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40003800 	.word	0x40003800
 800380c:	40003400 	.word	0x40003400

08003810 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	1c99      	adds	r1, r3, #2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6251      	str	r1, [r2, #36]	; 0x24
 8003836:	881a      	ldrh	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d113      	bne.n	800387e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003864:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d106      	bne.n	800387e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ffc9 	bl	8003810 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	1c99      	adds	r1, r3, #2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6251      	str	r1, [r2, #36]	; 0x24
 800389a:	8819      	ldrh	r1, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1d      	ldr	r2, [pc, #116]	; (8003918 <I2SEx_TxISR_I2SExt+0x90>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <I2SEx_TxISR_I2SExt+0x22>
 80038a6:	4b1d      	ldr	r3, [pc, #116]	; (800391c <I2SEx_TxISR_I2SExt+0x94>)
 80038a8:	e001      	b.n	80038ae <I2SEx_TxISR_I2SExt+0x26>
 80038aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ae:	460a      	mov	r2, r1
 80038b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d121      	bne.n	800390e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a12      	ldr	r2, [pc, #72]	; (8003918 <I2SEx_TxISR_I2SExt+0x90>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d101      	bne.n	80038d8 <I2SEx_TxISR_I2SExt+0x50>
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <I2SEx_TxISR_I2SExt+0x94>)
 80038d6:	e001      	b.n	80038dc <I2SEx_TxISR_I2SExt+0x54>
 80038d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	490d      	ldr	r1, [pc, #52]	; (8003918 <I2SEx_TxISR_I2SExt+0x90>)
 80038e4:	428b      	cmp	r3, r1
 80038e6:	d101      	bne.n	80038ec <I2SEx_TxISR_I2SExt+0x64>
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <I2SEx_TxISR_I2SExt+0x94>)
 80038ea:	e001      	b.n	80038f0 <I2SEx_TxISR_I2SExt+0x68>
 80038ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d106      	bne.n	800390e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ff81 	bl	8003810 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40003800 	.word	0x40003800
 800391c:	40003400 	.word	0x40003400

08003920 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68d8      	ldr	r0, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	1c99      	adds	r1, r3, #2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003938:	b282      	uxth	r2, r0
 800393a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d113      	bne.n	800397c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003962:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ff4a 	bl	8003810 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a20      	ldr	r2, [pc, #128]	; (8003a14 <I2SEx_RxISR_I2SExt+0x90>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d101      	bne.n	800399a <I2SEx_RxISR_I2SExt+0x16>
 8003996:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <I2SEx_RxISR_I2SExt+0x94>)
 8003998:	e001      	b.n	800399e <I2SEx_RxISR_I2SExt+0x1a>
 800399a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800399e:	68d8      	ldr	r0, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	1c99      	adds	r1, r3, #2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039aa:	b282      	uxth	r2, r0
 80039ac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d121      	bne.n	8003a0a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a12      	ldr	r2, [pc, #72]	; (8003a14 <I2SEx_RxISR_I2SExt+0x90>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d101      	bne.n	80039d4 <I2SEx_RxISR_I2SExt+0x50>
 80039d0:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <I2SEx_RxISR_I2SExt+0x94>)
 80039d2:	e001      	b.n	80039d8 <I2SEx_RxISR_I2SExt+0x54>
 80039d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	490d      	ldr	r1, [pc, #52]	; (8003a14 <I2SEx_RxISR_I2SExt+0x90>)
 80039e0:	428b      	cmp	r3, r1
 80039e2:	d101      	bne.n	80039e8 <I2SEx_RxISR_I2SExt+0x64>
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <I2SEx_RxISR_I2SExt+0x94>)
 80039e6:	e001      	b.n	80039ec <I2SEx_RxISR_I2SExt+0x68>
 80039e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039f0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff ff03 	bl	8003810 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40003800 	.word	0x40003800
 8003a18:	40003400 	.word	0x40003400

08003a1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e264      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d075      	beq.n	8003b26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a3a:	4ba3      	ldr	r3, [pc, #652]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d00c      	beq.n	8003a60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a46:	4ba0      	ldr	r3, [pc, #640]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d112      	bne.n	8003a78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a52:	4b9d      	ldr	r3, [pc, #628]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a5e:	d10b      	bne.n	8003a78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a60:	4b99      	ldr	r3, [pc, #612]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d05b      	beq.n	8003b24 <HAL_RCC_OscConfig+0x108>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d157      	bne.n	8003b24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e23f      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a80:	d106      	bne.n	8003a90 <HAL_RCC_OscConfig+0x74>
 8003a82:	4b91      	ldr	r3, [pc, #580]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a90      	ldr	r2, [pc, #576]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e01d      	b.n	8003acc <HAL_RCC_OscConfig+0xb0>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x98>
 8003a9a:	4b8b      	ldr	r3, [pc, #556]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a8a      	ldr	r2, [pc, #552]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4b88      	ldr	r3, [pc, #544]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a87      	ldr	r2, [pc, #540]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0xb0>
 8003ab4:	4b84      	ldr	r3, [pc, #528]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a83      	ldr	r2, [pc, #524]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	4b81      	ldr	r3, [pc, #516]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a80      	ldr	r2, [pc, #512]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d013      	beq.n	8003afc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fd f956 	bl	8000d84 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003adc:	f7fd f952 	bl	8000d84 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e204      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aee:	4b76      	ldr	r3, [pc, #472]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0xc0>
 8003afa:	e014      	b.n	8003b26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fd f942 	bl	8000d84 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fd f93e 	bl	8000d84 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e1f0      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b16:	4b6c      	ldr	r3, [pc, #432]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0xe8>
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d063      	beq.n	8003bfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b32:	4b65      	ldr	r3, [pc, #404]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3e:	4b62      	ldr	r3, [pc, #392]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d11c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4a:	4b5f      	ldr	r3, [pc, #380]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d116      	bne.n	8003b84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b56:	4b5c      	ldr	r3, [pc, #368]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_RCC_OscConfig+0x152>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d001      	beq.n	8003b6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e1c4      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6e:	4b56      	ldr	r3, [pc, #344]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4952      	ldr	r1, [pc, #328]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b82:	e03a      	b.n	8003bfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d020      	beq.n	8003bce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <HAL_RCC_OscConfig+0x2b0>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b92:	f7fd f8f7 	bl	8000d84 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b9a:	f7fd f8f3 	bl	8000d84 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e1a5      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bac:	4b46      	ldr	r3, [pc, #280]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb8:	4b43      	ldr	r3, [pc, #268]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4940      	ldr	r1, [pc, #256]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	600b      	str	r3, [r1, #0]
 8003bcc:	e015      	b.n	8003bfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bce:	4b3f      	ldr	r3, [pc, #252]	; (8003ccc <HAL_RCC_OscConfig+0x2b0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fd f8d6 	bl	8000d84 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bdc:	f7fd f8d2 	bl	8000d84 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e184      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bee:	4b36      	ldr	r3, [pc, #216]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d030      	beq.n	8003c68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d016      	beq.n	8003c3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0e:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <HAL_RCC_OscConfig+0x2b4>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c14:	f7fd f8b6 	bl	8000d84 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c1c:	f7fd f8b2 	bl	8000d84 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e164      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0x200>
 8003c3a:	e015      	b.n	8003c68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c3c:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <HAL_RCC_OscConfig+0x2b4>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c42:	f7fd f89f 	bl	8000d84 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c4a:	f7fd f89b 	bl	8000d84 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e14d      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5c:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f0      	bne.n	8003c4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80a0 	beq.w	8003db6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c7a:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10f      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	4a0e      	ldr	r2, [pc, #56]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c94:	6413      	str	r3, [r2, #64]	; 0x40
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_RCC_OscConfig+0x2b8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d121      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <HAL_RCC_OscConfig+0x2b8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a07      	ldr	r2, [pc, #28]	; (8003cd4 <HAL_RCC_OscConfig+0x2b8>)
 8003cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cbe:	f7fd f861 	bl	8000d84 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc4:	e011      	b.n	8003cea <HAL_RCC_OscConfig+0x2ce>
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	42470000 	.word	0x42470000
 8003cd0:	42470e80 	.word	0x42470e80
 8003cd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd8:	f7fd f854 	bl	8000d84 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e106      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cea:	4b85      	ldr	r3, [pc, #532]	; (8003f00 <HAL_RCC_OscConfig+0x4e4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d106      	bne.n	8003d0c <HAL_RCC_OscConfig+0x2f0>
 8003cfe:	4b81      	ldr	r3, [pc, #516]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	4a80      	ldr	r2, [pc, #512]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0a:	e01c      	b.n	8003d46 <HAL_RCC_OscConfig+0x32a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b05      	cmp	r3, #5
 8003d12:	d10c      	bne.n	8003d2e <HAL_RCC_OscConfig+0x312>
 8003d14:	4b7b      	ldr	r3, [pc, #492]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	4a7a      	ldr	r2, [pc, #488]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d1a:	f043 0304 	orr.w	r3, r3, #4
 8003d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d20:	4b78      	ldr	r3, [pc, #480]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a77      	ldr	r2, [pc, #476]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2c:	e00b      	b.n	8003d46 <HAL_RCC_OscConfig+0x32a>
 8003d2e:	4b75      	ldr	r3, [pc, #468]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	4a74      	ldr	r2, [pc, #464]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3a:	4b72      	ldr	r3, [pc, #456]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	4a71      	ldr	r2, [pc, #452]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d40:	f023 0304 	bic.w	r3, r3, #4
 8003d44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d015      	beq.n	8003d7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fd f819 	bl	8000d84 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d54:	e00a      	b.n	8003d6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d56:	f7fd f815 	bl	8000d84 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e0c5      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6c:	4b65      	ldr	r3, [pc, #404]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ee      	beq.n	8003d56 <HAL_RCC_OscConfig+0x33a>
 8003d78:	e014      	b.n	8003da4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7a:	f7fd f803 	bl	8000d84 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d80:	e00a      	b.n	8003d98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d82:	f7fc ffff 	bl	8000d84 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e0af      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d98:	4b5a      	ldr	r3, [pc, #360]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1ee      	bne.n	8003d82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d105      	bne.n	8003db6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003daa:	4b56      	ldr	r3, [pc, #344]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	4a55      	ldr	r2, [pc, #340]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 809b 	beq.w	8003ef6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dc0:	4b50      	ldr	r3, [pc, #320]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 030c 	and.w	r3, r3, #12
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d05c      	beq.n	8003e86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d141      	bne.n	8003e58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd4:	4b4c      	ldr	r3, [pc, #304]	; (8003f08 <HAL_RCC_OscConfig+0x4ec>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fc ffd3 	bl	8000d84 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de2:	f7fc ffcf 	bl	8000d84 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e081      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df4:	4b43      	ldr	r3, [pc, #268]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1f0      	bne.n	8003de2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	019b      	lsls	r3, r3, #6
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	041b      	lsls	r3, r3, #16
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	061b      	lsls	r3, r3, #24
 8003e24:	4937      	ldr	r1, [pc, #220]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e2a:	4b37      	ldr	r3, [pc, #220]	; (8003f08 <HAL_RCC_OscConfig+0x4ec>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e30:	f7fc ffa8 	bl	8000d84 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fc ffa4 	bl	8000d84 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e056      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4a:	4b2e      	ldr	r3, [pc, #184]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x41c>
 8003e56:	e04e      	b.n	8003ef6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e58:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <HAL_RCC_OscConfig+0x4ec>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5e:	f7fc ff91 	bl	8000d84 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e66:	f7fc ff8d 	bl	8000d84 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e03f      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e78:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f0      	bne.n	8003e66 <HAL_RCC_OscConfig+0x44a>
 8003e84:	e037      	b.n	8003ef6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e032      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e92:	4b1c      	ldr	r3, [pc, #112]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d028      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d121      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d11a      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ec8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d111      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	3b01      	subs	r3, #1
 8003edc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d107      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40007000 	.word	0x40007000
 8003f04:	40023800 	.word	0x40023800
 8003f08:	42470060 	.word	0x42470060

08003f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0cc      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f20:	4b68      	ldr	r3, [pc, #416]	; (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d90c      	bls.n	8003f48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b65      	ldr	r3, [pc, #404]	; (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	4b63      	ldr	r3, [pc, #396]	; (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0b8      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d020      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f60:	4b59      	ldr	r3, [pc, #356]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	4a58      	ldr	r2, [pc, #352]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f78:	4b53      	ldr	r3, [pc, #332]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4a52      	ldr	r2, [pc, #328]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f84:	4b50      	ldr	r3, [pc, #320]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	494d      	ldr	r1, [pc, #308]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d044      	beq.n	800402c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d107      	bne.n	8003fba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003faa:	4b47      	ldr	r3, [pc, #284]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d119      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e07f      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d003      	beq.n	8003fca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	4b3f      	ldr	r3, [pc, #252]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e06f      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fda:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e067      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fea:	4b37      	ldr	r3, [pc, #220]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f023 0203 	bic.w	r2, r3, #3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4934      	ldr	r1, [pc, #208]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ffc:	f7fc fec2 	bl	8000d84 <HAL_GetTick>
 8004000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	e00a      	b.n	800401a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004004:	f7fc febe 	bl	8000d84 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e04f      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401a:	4b2b      	ldr	r3, [pc, #172]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 020c 	and.w	r2, r3, #12
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	429a      	cmp	r2, r3
 800402a:	d1eb      	bne.n	8004004 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800402c:	4b25      	ldr	r3, [pc, #148]	; (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d20c      	bcs.n	8004054 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403a:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004042:	4b20      	ldr	r3, [pc, #128]	; (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e032      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004060:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4916      	ldr	r1, [pc, #88]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	4313      	orrs	r3, r2
 8004070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800407e:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	490e      	ldr	r1, [pc, #56]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	4313      	orrs	r3, r2
 8004090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004092:	f000 f821 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 8004096:	4602      	mov	r2, r0
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	490a      	ldr	r1, [pc, #40]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 80040a4:	5ccb      	ldrb	r3, [r1, r3]
 80040a6:	fa22 f303 	lsr.w	r3, r2, r3
 80040aa:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040ae:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <HAL_RCC_ClockConfig+0x1c8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fc fe22 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40023c00 	.word	0x40023c00
 80040c8:	40023800 	.word	0x40023800
 80040cc:	08007c04 	.word	0x08007c04
 80040d0:	20000000 	.word	0x20000000
 80040d4:	20000004 	.word	0x20000004

080040d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	607b      	str	r3, [r7, #4]
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	2300      	movs	r3, #0
 80040ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040f0:	4b67      	ldr	r3, [pc, #412]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 030c 	and.w	r3, r3, #12
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d00d      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0x40>
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	f200 80bd 	bhi.w	800427c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x34>
 8004106:	2b04      	cmp	r3, #4
 8004108:	d003      	beq.n	8004112 <HAL_RCC_GetSysClockFreq+0x3a>
 800410a:	e0b7      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800410c:	4b61      	ldr	r3, [pc, #388]	; (8004294 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800410e:	60bb      	str	r3, [r7, #8]
       break;
 8004110:	e0b7      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004112:	4b61      	ldr	r3, [pc, #388]	; (8004298 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004114:	60bb      	str	r3, [r7, #8]
      break;
 8004116:	e0b4      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004118:	4b5d      	ldr	r3, [pc, #372]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004120:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004122:	4b5b      	ldr	r3, [pc, #364]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d04d      	beq.n	80041ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412e:	4b58      	ldr	r3, [pc, #352]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	099b      	lsrs	r3, r3, #6
 8004134:	461a      	mov	r2, r3
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800413e:	f04f 0100 	mov.w	r1, #0
 8004142:	ea02 0800 	and.w	r8, r2, r0
 8004146:	ea03 0901 	and.w	r9, r3, r1
 800414a:	4640      	mov	r0, r8
 800414c:	4649      	mov	r1, r9
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	014b      	lsls	r3, r1, #5
 8004158:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800415c:	0142      	lsls	r2, r0, #5
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	ebb0 0008 	subs.w	r0, r0, r8
 8004166:	eb61 0109 	sbc.w	r1, r1, r9
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	018b      	lsls	r3, r1, #6
 8004174:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004178:	0182      	lsls	r2, r0, #6
 800417a:	1a12      	subs	r2, r2, r0
 800417c:	eb63 0301 	sbc.w	r3, r3, r1
 8004180:	f04f 0000 	mov.w	r0, #0
 8004184:	f04f 0100 	mov.w	r1, #0
 8004188:	00d9      	lsls	r1, r3, #3
 800418a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800418e:	00d0      	lsls	r0, r2, #3
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	eb12 0208 	adds.w	r2, r2, r8
 8004198:	eb43 0309 	adc.w	r3, r3, r9
 800419c:	f04f 0000 	mov.w	r0, #0
 80041a0:	f04f 0100 	mov.w	r1, #0
 80041a4:	0259      	lsls	r1, r3, #9
 80041a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80041aa:	0250      	lsls	r0, r2, #9
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4610      	mov	r0, r2
 80041b2:	4619      	mov	r1, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	461a      	mov	r2, r3
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	f7fc f804 	bl	80001c8 <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4613      	mov	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e04a      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ca:	4b31      	ldr	r3, [pc, #196]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	099b      	lsrs	r3, r3, #6
 80041d0:	461a      	mov	r2, r3
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041da:	f04f 0100 	mov.w	r1, #0
 80041de:	ea02 0400 	and.w	r4, r2, r0
 80041e2:	ea03 0501 	and.w	r5, r3, r1
 80041e6:	4620      	mov	r0, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	014b      	lsls	r3, r1, #5
 80041f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041f8:	0142      	lsls	r2, r0, #5
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	1b00      	subs	r0, r0, r4
 8004200:	eb61 0105 	sbc.w	r1, r1, r5
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	018b      	lsls	r3, r1, #6
 800420e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004212:	0182      	lsls	r2, r0, #6
 8004214:	1a12      	subs	r2, r2, r0
 8004216:	eb63 0301 	sbc.w	r3, r3, r1
 800421a:	f04f 0000 	mov.w	r0, #0
 800421e:	f04f 0100 	mov.w	r1, #0
 8004222:	00d9      	lsls	r1, r3, #3
 8004224:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004228:	00d0      	lsls	r0, r2, #3
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	1912      	adds	r2, r2, r4
 8004230:	eb45 0303 	adc.w	r3, r5, r3
 8004234:	f04f 0000 	mov.w	r0, #0
 8004238:	f04f 0100 	mov.w	r1, #0
 800423c:	0299      	lsls	r1, r3, #10
 800423e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004242:	0290      	lsls	r0, r2, #10
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4610      	mov	r0, r2
 800424a:	4619      	mov	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	461a      	mov	r2, r3
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	f7fb ffb8 	bl	80001c8 <__aeabi_uldivmod>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4613      	mov	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	3301      	adds	r3, #1
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	60bb      	str	r3, [r7, #8]
      break;
 800427a:	e002      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800427e:	60bb      	str	r3, [r7, #8]
      break;
 8004280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004282:	68bb      	ldr	r3, [r7, #8]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800428e:	bf00      	nop
 8004290:	40023800 	.word	0x40023800
 8004294:	00f42400 	.word	0x00f42400
 8004298:	007a1200 	.word	0x007a1200

0800429c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a0:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042a2:	681b      	ldr	r3, [r3, #0]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000000 	.word	0x20000000

080042b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042b8:	f7ff fff0 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	0a9b      	lsrs	r3, r3, #10
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	4903      	ldr	r1, [pc, #12]	; (80042d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40023800 	.word	0x40023800
 80042d8:	08007c14 	.word	0x08007c14

080042dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004300:	2b00      	cmp	r3, #0
 8004302:	d035      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004304:	4b62      	ldr	r3, [pc, #392]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800430a:	f7fc fd3b 	bl	8000d84 <HAL_GetTick>
 800430e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004312:	f7fc fd37 	bl	8000d84 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0b0      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004324:	4b5b      	ldr	r3, [pc, #364]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f0      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	019a      	lsls	r2, r3, #6
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	071b      	lsls	r3, r3, #28
 800433c:	4955      	ldr	r1, [pc, #340]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004344:	4b52      	ldr	r3, [pc, #328]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800434a:	f7fc fd1b 	bl	8000d84 <HAL_GetTick>
 800434e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004350:	e008      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004352:	f7fc fd17 	bl	8000d84 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e090      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004364:	4b4b      	ldr	r3, [pc, #300]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8083 	beq.w	8004484 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	4b44      	ldr	r3, [pc, #272]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	4a43      	ldr	r2, [pc, #268]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438c:	6413      	str	r3, [r2, #64]	; 0x40
 800438e:	4b41      	ldr	r3, [pc, #260]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800439a:	4b3f      	ldr	r3, [pc, #252]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a3e      	ldr	r2, [pc, #248]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043a6:	f7fc fced 	bl	8000d84 <HAL_GetTick>
 80043aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043ae:	f7fc fce9 	bl	8000d84 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e062      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043c0:	4b35      	ldr	r3, [pc, #212]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043cc:	4b31      	ldr	r3, [pc, #196]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d02f      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d028      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ea:	4b2a      	ldr	r3, [pc, #168]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043f4:	4b29      	ldr	r3, [pc, #164]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043fa:	4b28      	ldr	r3, [pc, #160]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004400:	4a24      	ldr	r2, [pc, #144]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004406:	4b23      	ldr	r3, [pc, #140]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b01      	cmp	r3, #1
 8004410:	d114      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004412:	f7fc fcb7 	bl	8000d84 <HAL_GetTick>
 8004416:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004418:	e00a      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800441a:	f7fc fcb3 	bl	8000d84 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	f241 3288 	movw	r2, #5000	; 0x1388
 8004428:	4293      	cmp	r3, r2
 800442a:	d901      	bls.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e02a      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004430:	4b18      	ldr	r3, [pc, #96]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0ee      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004448:	d10d      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800445a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445e:	490d      	ldr	r1, [pc, #52]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004460:	4313      	orrs	r3, r2
 8004462:	608b      	str	r3, [r1, #8]
 8004464:	e005      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004470:	6093      	str	r3, [r2, #8]
 8004472:	4b08      	ldr	r3, [pc, #32]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004474:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447e:	4905      	ldr	r1, [pc, #20]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004480:	4313      	orrs	r3, r2
 8004482:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	42470068 	.word	0x42470068
 8004494:	40023800 	.word	0x40023800
 8004498:	40007000 	.word	0x40007000
 800449c:	42470e40 	.word	0x42470e40

080044a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d13e      	bne.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044be:	4b23      	ldr	r3, [pc, #140]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d12f      	bne.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044d4:	4b1e      	ldr	r3, [pc, #120]	; (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044d6:	617b      	str	r3, [r7, #20]
          break;
 80044d8:	e02f      	b.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044da:	4b1c      	ldr	r3, [pc, #112]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e6:	d108      	bne.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044e8:	4b18      	ldr	r3, [pc, #96]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f0:	4a18      	ldr	r2, [pc, #96]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	e007      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044fa:	4b14      	ldr	r3, [pc, #80]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004502:	4a15      	ldr	r2, [pc, #84]	; (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004504:	fbb2 f3f3 	udiv	r3, r2, r3
 8004508:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800450c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004510:	099b      	lsrs	r3, r3, #6
 8004512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	fb02 f303 	mul.w	r3, r2, r3
 800451c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004524:	0f1b      	lsrs	r3, r3, #28
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004530:	617b      	str	r3, [r7, #20]
          break;
 8004532:	e002      	b.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]
          break;
 8004538:	bf00      	nop
        }
      }
      break;
 800453a:	bf00      	nop
    }
  }
  return frequency;
 800453c:	697b      	ldr	r3, [r7, #20]
}
 800453e:	4618      	mov	r0, r3
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40023800 	.word	0x40023800
 8004550:	00bb8000 	.word	0x00bb8000
 8004554:	007a1200 	.word	0x007a1200
 8004558:	00f42400 	.word	0x00f42400

0800455c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e07b      	b.n	8004666 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	2b00      	cmp	r3, #0
 8004574:	d108      	bne.n	8004588 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800457e:	d009      	beq.n	8004594 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	61da      	str	r2, [r3, #28]
 8004586:	e005      	b.n	8004594 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fc fa94 	bl	8000adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004618:	ea42 0103 	orr.w	r1, r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	0c1b      	lsrs	r3, r3, #16
 8004632:	f003 0104 	and.w	r1, r3, #4
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	f003 0210 	and.w	r2, r3, #16
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69da      	ldr	r2, [r3, #28]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004654:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800466e:	b084      	sub	sp, #16
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	f107 001c 	add.w	r0, r7, #28
 800467c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	2b01      	cmp	r3, #1
 8004684:	d122      	bne.n	80046cc <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800469a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d105      	bne.n	80046c0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f99f 	bl	8004a04 <USB_CoreReset>
 80046c6:	4603      	mov	r3, r0
 80046c8:	73fb      	strb	r3, [r7, #15]
 80046ca:	e01a      	b.n	8004702 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f993 	bl	8004a04 <USB_CoreReset>
 80046de:	4603      	mov	r3, r0
 80046e0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d106      	bne.n	80046f6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38
 80046f4:	e005      	b.n	8004702 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	2b01      	cmp	r3, #1
 8004706:	d10b      	bne.n	8004720 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f043 0206 	orr.w	r2, r3, #6
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f043 0220 	orr.w	r2, r3, #32
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004720:	7bfb      	ldrb	r3, [r7, #15]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800472c:	b004      	add	sp, #16
 800472e:	4770      	bx	lr

08004730 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f043 0201 	orr.w	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f023 0201 	bic.w	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d115      	bne.n	80047c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047a2:	2001      	movs	r0, #1
 80047a4:	f7fc fafa 	bl	8000d9c <HAL_Delay>
      ms++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f919 	bl	80049e6 <USB_GetMode>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d01e      	beq.n	80047f8 <USB_SetCurrentMode+0x84>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b31      	cmp	r3, #49	; 0x31
 80047be:	d9f0      	bls.n	80047a2 <USB_SetCurrentMode+0x2e>
 80047c0:	e01a      	b.n	80047f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047c2:	78fb      	ldrb	r3, [r7, #3]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d115      	bne.n	80047f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047d4:	2001      	movs	r0, #1
 80047d6:	f7fc fae1 	bl	8000d9c <HAL_Delay>
      ms++;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3301      	adds	r3, #1
 80047de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f900 	bl	80049e6 <USB_GetMode>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <USB_SetCurrentMode+0x84>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b31      	cmp	r3, #49	; 0x31
 80047f0:	d9f0      	bls.n	80047d4 <USB_SetCurrentMode+0x60>
 80047f2:	e001      	b.n	80047f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e005      	b.n	8004804 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b32      	cmp	r3, #50	; 0x32
 80047fc:	d101      	bne.n	8004802 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	019b      	lsls	r3, r3, #6
 800481e:	f043 0220 	orr.w	r2, r3, #32
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3301      	adds	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	4a08      	ldr	r2, [pc, #32]	; (8004850 <USB_FlushTxFifo+0x44>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e006      	b.n	8004844 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	2b20      	cmp	r3, #32
 8004840:	d0f1      	beq.n	8004826 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	00030d40 	.word	0x00030d40

08004854 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2210      	movs	r2, #16
 8004864:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3301      	adds	r3, #1
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	4a08      	ldr	r2, [pc, #32]	; (8004890 <USB_FlushRxFifo+0x3c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e006      	b.n	8004884 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b10      	cmp	r3, #16
 8004880:	d0f1      	beq.n	8004866 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	00030d40 	.word	0x00030d40

08004894 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004894:	b480      	push	{r7}
 8004896:	b089      	sub	sp, #36	; 0x24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	4611      	mov	r1, r2
 80048a0:	461a      	mov	r2, r3
 80048a2:	460b      	mov	r3, r1
 80048a4:	71fb      	strb	r3, [r7, #7]
 80048a6:	4613      	mov	r3, r2
 80048a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80048b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d123      	bne.n	8004902 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048ba:	88bb      	ldrh	r3, [r7, #4]
 80048bc:	3303      	adds	r3, #3
 80048be:	089b      	lsrs	r3, r3, #2
 80048c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048c2:	2300      	movs	r3, #0
 80048c4:	61bb      	str	r3, [r7, #24]
 80048c6:	e018      	b.n	80048fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	031a      	lsls	r2, r3, #12
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d4:	461a      	mov	r2, r3
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	3301      	adds	r3, #1
 80048e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	3301      	adds	r3, #1
 80048e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	3301      	adds	r3, #1
 80048ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3301      	adds	r3, #1
 80048f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	3301      	adds	r3, #1
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d3e2      	bcc.n	80048c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3724      	adds	r7, #36	; 0x24
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004910:	b480      	push	{r7}
 8004912:	b08b      	sub	sp, #44	; 0x2c
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	089b      	lsrs	r3, r3, #2
 800492a:	b29b      	uxth	r3, r3
 800492c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004936:	2300      	movs	r3, #0
 8004938:	623b      	str	r3, [r7, #32]
 800493a:	e014      	b.n	8004966 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	601a      	str	r2, [r3, #0]
    pDest++;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	3301      	adds	r3, #1
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	3301      	adds	r3, #1
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	3301      	adds	r3, #1
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	3301      	adds	r3, #1
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	3301      	adds	r3, #1
 8004964:	623b      	str	r3, [r7, #32]
 8004966:	6a3a      	ldr	r2, [r7, #32]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	429a      	cmp	r2, r3
 800496c:	d3e6      	bcc.n	800493c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800496e:	8bfb      	ldrh	r3, [r7, #30]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01e      	beq.n	80049b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497e:	461a      	mov	r2, r3
 8004980:	f107 0310 	add.w	r3, r7, #16
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	b2db      	uxtb	r3, r3
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
 8004994:	b2da      	uxtb	r2, r3
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	701a      	strb	r2, [r3, #0]
      i++;
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	3301      	adds	r3, #1
 800499e:	623b      	str	r3, [r7, #32]
      pDest++;
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	3301      	adds	r3, #1
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80049a6:	8bfb      	ldrh	r3, [r7, #30]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80049ac:	8bfb      	ldrh	r3, [r7, #30]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1ea      	bne.n	8004988 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	372c      	adds	r7, #44	; 0x2c
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4013      	ands	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049d8:	68fb      	ldr	r3, [r7, #12]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f003 0301 	and.w	r3, r3, #1
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3301      	adds	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <USB_CoreReset+0x60>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d901      	bls.n	8004a20 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e01a      	b.n	8004a56 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	daf3      	bge.n	8004a10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f043 0201 	orr.w	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <USB_CoreReset+0x60>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e006      	b.n	8004a56 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d0f1      	beq.n	8004a38 <USB_CoreReset+0x34>

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	00030d40 	.word	0x00030d40

08004a68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a68:	b084      	sub	sp, #16
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	f107 001c 	add.w	r0, r7, #28
 8004a76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a84:	461a      	mov	r2, r3
 8004a86:	2300      	movs	r3, #0
 8004a88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d018      	beq.n	8004aec <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d10a      	bne.n	8004ad6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ace:	f043 0304 	orr.w	r3, r3, #4
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	e014      	b.n	8004b00 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ae4:	f023 0304 	bic.w	r3, r3, #4
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e009      	b.n	8004b00 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004afa:	f023 0304 	bic.w	r3, r3, #4
 8004afe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004b00:	2110      	movs	r1, #16
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff fe82 	bl	800480c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fea3 	bl	8004854 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e015      	b.n	8004b40 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b20:	461a      	mov	r2, r3
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b26:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b34:	461a      	mov	r2, r3
 8004b36:	2300      	movs	r3, #0
 8004b38:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d3e5      	bcc.n	8004b14 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b54:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a13      	ldr	r2, [pc, #76]	; (8004bbc <USB_HostInit+0x154>)
 8004b6e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a13      	ldr	r2, [pc, #76]	; (8004bc0 <USB_HostInit+0x158>)
 8004b74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b78:	e009      	b.n	8004b8e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2280      	movs	r2, #128	; 0x80
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a10      	ldr	r2, [pc, #64]	; (8004bc4 <USB_HostInit+0x15c>)
 8004b84:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a0f      	ldr	r2, [pc, #60]	; (8004bc8 <USB_HostInit+0x160>)
 8004b8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f043 0210 	orr.w	r2, r3, #16
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <USB_HostInit+0x164>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bb8:	b004      	add	sp, #16
 8004bba:	4770      	bx	lr
 8004bbc:	01000200 	.word	0x01000200
 8004bc0:	00e00300 	.word	0x00e00300
 8004bc4:	00600080 	.word	0x00600080
 8004bc8:	004000e0 	.word	0x004000e0
 8004bcc:	a3200008 	.word	0xa3200008

08004bd0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bee:	f023 0303 	bic.w	r3, r3, #3
 8004bf2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	68f9      	ldr	r1, [r7, #12]
 8004c04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d107      	bne.n	8004c22 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c1e:	6053      	str	r3, [r2, #4]
 8004c20:	e009      	b.n	8004c36 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d106      	bne.n	8004c36 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f241 7370 	movw	r3, #6000	; 0x1770
 8004c34:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c64:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c72:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c74:	2064      	movs	r0, #100	; 0x64
 8004c76:	f7fc f891 	bl	8000d9c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c86:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004c88:	200a      	movs	r0, #10
 8004c8a:	f7fc f887 	bl	8000d9c <HAL_Delay>

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cbc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d109      	bne.n	8004cdc <USB_DriveVbus+0x44>
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d106      	bne.n	8004cdc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cda:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce6:	d109      	bne.n	8004cfc <USB_DriveVbus+0x64>
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cfa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	0c5b      	lsrs	r3, r3, #17
 8004d28:	f003 0303 	and.w	r3, r3, #3
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	b29b      	uxth	r3, r3
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	4608      	mov	r0, r1
 8004d66:	4611      	mov	r1, r2
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	70fb      	strb	r3, [r7, #3]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	70bb      	strb	r3, [r7, #2]
 8004d72:	4613      	mov	r3, r2
 8004d74:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d90:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d87e      	bhi.n	8004e98 <USB_HC_Init+0x13c>
 8004d9a:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <USB_HC_Init+0x44>)
 8004d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da0:	08004db1 	.word	0x08004db1
 8004da4:	08004e5b 	.word	0x08004e5b
 8004da8:	08004db1 	.word	0x08004db1
 8004dac:	08004e1d 	.word	0x08004e1d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	f240 439d 	movw	r3, #1181	; 0x49d
 8004dc2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004dc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	da10      	bge.n	8004dee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	78fa      	ldrb	r2, [r7, #3]
 8004ddc:	0151      	lsls	r1, r2, #5
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	440a      	add	r2, r1
 8004de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dea:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004dec:	e057      	b.n	8004e9e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d051      	beq.n	8004e9e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e18:	60d3      	str	r3, [r2, #12]
      break;
 8004e1a:	e040      	b.n	8004e9e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f240 639d 	movw	r3, #1693	; 0x69d
 8004e2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	da34      	bge.n	8004ea2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e56:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004e58:	e023      	b.n	8004ea2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e66:	461a      	mov	r2, r3
 8004e68:	f240 2325 	movw	r3, #549	; 0x225
 8004e6c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	da17      	bge.n	8004ea6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	78fa      	ldrb	r2, [r7, #3]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e90:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004e94:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e96:	e006      	b.n	8004ea6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	77fb      	strb	r3, [r7, #31]
      break;
 8004e9c:	e004      	b.n	8004ea8 <USB_HC_Init+0x14c>
      break;
 8004e9e:	bf00      	nop
 8004ea0:	e002      	b.n	8004ea8 <USB_HC_Init+0x14c>
      break;
 8004ea2:	bf00      	nop
 8004ea4:	e000      	b.n	8004ea8 <USB_HC_Init+0x14c>
      break;
 8004ea6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebc:	6939      	ldr	r1, [r7, #16]
 8004ebe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004ed2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	da03      	bge.n	8004ee2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	e001      	b.n	8004ee6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff ff0f 	bl	8004d0a <USB_GetHostSpeed>
 8004eec:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004eee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d106      	bne.n	8004f04 <USB_HC_Init+0x1a8>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d003      	beq.n	8004f04 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	e001      	b.n	8004f08 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f08:	787b      	ldrb	r3, [r7, #1]
 8004f0a:	059b      	lsls	r3, r3, #22
 8004f0c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f10:	78bb      	ldrb	r3, [r7, #2]
 8004f12:	02db      	lsls	r3, r3, #11
 8004f14:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f18:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f1e:	049b      	lsls	r3, r3, #18
 8004f20:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f24:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f26:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f28:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f2c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	0159      	lsls	r1, r3, #5
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	440b      	add	r3, r1
 8004f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f44:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004f46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d10f      	bne.n	8004f6e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	0151      	lsls	r1, r2, #5
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	440a      	add	r2, r1
 8004f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f6c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004f6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3720      	adds	r7, #32
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08c      	sub	sp, #48	; 0x30
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	4613      	mov	r3, r2
 8004f84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	785b      	ldrb	r3, [r3, #1]
 8004f8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f94:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d02d      	beq.n	8004ffe <USB_HC_StartXfer+0x86>
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	791b      	ldrb	r3, [r3, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d129      	bne.n	8004ffe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d117      	bne.n	8004fe0 <USB_HC_StartXfer+0x68>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	79db      	ldrb	r3, [r3, #7]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <USB_HC_StartXfer+0x48>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	79db      	ldrb	r3, [r3, #7]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d10f      	bne.n	8004fe0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	6a3a      	ldr	r2, [r7, #32]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fde:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10b      	bne.n	8004ffe <USB_HC_StartXfer+0x86>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	795b      	ldrb	r3, [r3, #5]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d107      	bne.n	8004ffe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 fa2f 	bl	8005458 <USB_DoPing>
      return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e0f8      	b.n	80051f0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d018      	beq.n	8005038 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	8912      	ldrh	r2, [r2, #8]
 800500e:	4413      	add	r3, r2
 8005010:	3b01      	subs	r3, #1
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	8912      	ldrh	r2, [r2, #8]
 8005016:	fbb3 f3f2 	udiv	r3, r3, r2
 800501a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800501c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800501e:	8b7b      	ldrh	r3, [r7, #26]
 8005020:	429a      	cmp	r2, r3
 8005022:	d90b      	bls.n	800503c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005024:	8b7b      	ldrh	r3, [r7, #26]
 8005026:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005028:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	8912      	ldrh	r2, [r2, #8]
 800502e:	fb02 f203 	mul.w	r2, r2, r3
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	611a      	str	r2, [r3, #16]
 8005036:	e001      	b.n	800503c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005038:	2301      	movs	r3, #1
 800503a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	78db      	ldrb	r3, [r3, #3]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005044:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	8912      	ldrh	r2, [r2, #8]
 800504a:	fb02 f203 	mul.w	r2, r2, r3
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	611a      	str	r2, [r3, #16]
 8005052:	e003      	b.n	800505c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	695a      	ldr	r2, [r3, #20]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005064:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005066:	04d9      	lsls	r1, r3, #19
 8005068:	4b63      	ldr	r3, [pc, #396]	; (80051f8 <USB_HC_StartXfer+0x280>)
 800506a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800506c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	7a9b      	ldrb	r3, [r3, #10]
 8005072:	075b      	lsls	r3, r3, #29
 8005074:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005078:	69f9      	ldr	r1, [r7, #28]
 800507a:	0148      	lsls	r0, r1, #5
 800507c:	6a39      	ldr	r1, [r7, #32]
 800507e:	4401      	add	r1, r0
 8005080:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005084:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005086:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d009      	beq.n	80050a2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	68d9      	ldr	r1, [r3, #12]
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	4413      	add	r3, r2
 800509a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509e:	460a      	mov	r2, r1
 80050a0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	bf0c      	ite	eq
 80050b2:	2301      	moveq	r3, #1
 80050b4:	2300      	movne	r3, #0
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	0151      	lsls	r1, r2, #5
 80050cc:	6a3a      	ldr	r2, [r7, #32]
 80050ce:	440a      	add	r2, r1
 80050d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050d8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	7e7b      	ldrb	r3, [r7, #25]
 80050ea:	075b      	lsls	r3, r3, #29
 80050ec:	69f9      	ldr	r1, [r7, #28]
 80050ee:	0148      	lsls	r0, r1, #5
 80050f0:	6a39      	ldr	r1, [r7, #32]
 80050f2:	4401      	add	r1, r0
 80050f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80050f8:	4313      	orrs	r3, r2
 80050fa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	4413      	add	r3, r2
 8005104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005112:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	78db      	ldrb	r3, [r3, #3]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d004      	beq.n	8005126 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	e003      	b.n	800512e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800512c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005134:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	4413      	add	r3, r2
 800513e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005142:	461a      	mov	r2, r3
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	e04e      	b.n	80051f0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	78db      	ldrb	r3, [r3, #3]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d149      	bne.n	80051ee <USB_HC_StartXfer+0x276>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d045      	beq.n	80051ee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	79db      	ldrb	r3, [r3, #7]
 8005166:	2b03      	cmp	r3, #3
 8005168:	d830      	bhi.n	80051cc <USB_HC_StartXfer+0x254>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <USB_HC_StartXfer+0x1f8>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	08005181 	.word	0x08005181
 8005174:	080051a5 	.word	0x080051a5
 8005178:	08005181 	.word	0x08005181
 800517c:	080051a5 	.word	0x080051a5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	3303      	adds	r3, #3
 8005186:	089b      	lsrs	r3, r3, #2
 8005188:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800518a:	8afa      	ldrh	r2, [r7, #22]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	b29b      	uxth	r3, r3
 8005192:	429a      	cmp	r2, r3
 8005194:	d91c      	bls.n	80051d0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f043 0220 	orr.w	r2, r3, #32
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80051a2:	e015      	b.n	80051d0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	3303      	adds	r3, #3
 80051aa:	089b      	lsrs	r3, r3, #2
 80051ac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80051ae:	8afa      	ldrh	r2, [r7, #22]
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d90a      	bls.n	80051d4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80051ca:	e003      	b.n	80051d4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80051cc:	bf00      	nop
 80051ce:	e002      	b.n	80051d6 <USB_HC_StartXfer+0x25e>
        break;
 80051d0:	bf00      	nop
 80051d2:	e000      	b.n	80051d6 <USB_HC_StartXfer+0x25e>
        break;
 80051d4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	68d9      	ldr	r1, [r3, #12]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	785a      	ldrb	r2, [r3, #1]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2000      	movs	r0, #0
 80051e6:	9000      	str	r0, [sp, #0]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f7ff fb53 	bl	8004894 <USB_WritePacket>
  }

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3728      	adds	r7, #40	; 0x28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	1ff80000 	.word	0x1ff80000

080051fc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	b29b      	uxth	r3, r3
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800521e:	b480      	push	{r7}
 8005220:	b089      	sub	sp, #36	; 0x24
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800522e:	78fb      	ldrb	r3, [r7, #3]
 8005230:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	4413      	add	r3, r2
 800523e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	0c9b      	lsrs	r3, r3, #18
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	4413      	add	r3, r2
 8005254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	0fdb      	lsrs	r3, r3, #31
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b20      	cmp	r3, #32
 800526c:	d104      	bne.n	8005278 <USB_HC_Halt+0x5a>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	e0e8      	b.n	800544a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <USB_HC_Halt+0x66>
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d173      	bne.n	800536c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	440a      	add	r2, r1
 800529a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052a2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f040 80cb 	bne.w	8005448 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d143      	bne.n	8005346 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052dc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052fc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	4413      	add	r3, r2
 8005306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	440a      	add	r2, r1
 8005314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005318:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800531c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	3301      	adds	r3, #1
 8005322:	61fb      	str	r3, [r7, #28]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800532a:	d81d      	bhi.n	8005368 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	4413      	add	r3, r2
 8005334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800533e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005342:	d0ec      	beq.n	800531e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005344:	e080      	b.n	8005448 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	4413      	add	r3, r2
 800534e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	0151      	lsls	r1, r2, #5
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	440a      	add	r2, r1
 800535c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005360:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005364:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005366:	e06f      	b.n	8005448 <USB_HC_Halt+0x22a>
            break;
 8005368:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800536a:	e06d      	b.n	8005448 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	4413      	add	r3, r2
 8005374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	440a      	add	r2, r1
 8005382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005386:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800538a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d143      	bne.n	8005424 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	0151      	lsls	r1, r2, #5
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	440a      	add	r2, r1
 80053f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053fa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	3301      	adds	r3, #1
 8005400:	61fb      	str	r3, [r7, #28]
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005408:	d81d      	bhi.n	8005446 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	4413      	add	r3, r2
 8005412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800541c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005420:	d0ec      	beq.n	80053fc <USB_HC_Halt+0x1de>
 8005422:	e011      	b.n	8005448 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	4413      	add	r3, r2
 800542c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	440a      	add	r2, r1
 800543a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800543e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	e000      	b.n	8005448 <USB_HC_Halt+0x22a>
          break;
 8005446:	bf00      	nop
    }
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3724      	adds	r7, #36	; 0x24
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800546c:	2301      	movs	r3, #1
 800546e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	04da      	lsls	r2, r3, #19
 8005474:	4b15      	ldr	r3, [pc, #84]	; (80054cc <USB_DoPing+0x74>)
 8005476:	4013      	ands	r3, r2
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	440a      	add	r2, r1
 8005480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005488:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	4413      	add	r3, r2
 8005492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b6:	461a      	mov	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	1ff80000 	.word	0x1ff80000

080054d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff f936 	bl	8004752 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80054e6:	2110      	movs	r1, #16
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff f98f 	bl	800480c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff f9b0 	bl	8004854 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80054f4:	2300      	movs	r3, #0
 80054f6:	613b      	str	r3, [r7, #16]
 80054f8:	e01f      	b.n	800553a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005510:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005518:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005520:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552e:	461a      	mov	r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	3301      	adds	r3, #1
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	2b0f      	cmp	r3, #15
 800553e:	d9dc      	bls.n	80054fa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	e034      	b.n	80055b0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4413      	add	r3, r2
 800554e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800555c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005564:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800556c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557a:	461a      	mov	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	3301      	adds	r3, #1
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800558c:	d80c      	bhi.n	80055a8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4413      	add	r3, r2
 8005596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055a4:	d0ec      	beq.n	8005580 <USB_StopHost+0xb0>
 80055a6:	e000      	b.n	80055aa <USB_StopHost+0xda>
        break;
 80055a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	3301      	adds	r3, #1
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2b0f      	cmp	r3, #15
 80055b4:	d9c7      	bls.n	8005546 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055bc:	461a      	mov	r2, r3
 80055be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055ca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff f8af 	bl	8004730 <USB_EnableGlobalInt>

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b089      	sub	sp, #36	; 0x24
 80055e0:	af04      	add	r7, sp, #16
 80055e2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80055e4:	2301      	movs	r3, #1
 80055e6:	2202      	movs	r2, #2
 80055e8:	2102      	movs	r1, #2
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fc66 	bl	8005ebc <USBH_FindInterface>
 80055f0:	4603      	mov	r3, r0
 80055f2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2bff      	cmp	r3, #255	; 0xff
 80055f8:	d002      	beq.n	8005600 <USBH_CDC_InterfaceInit+0x24>
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d901      	bls.n	8005604 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005600:	2302      	movs	r3, #2
 8005602:	e13d      	b.n	8005880 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fc3b 	bl	8005e84 <USBH_SelectInterface>
 800560e:	4603      	mov	r3, r0
 8005610:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005612:	7bbb      	ldrb	r3, [r7, #14]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005618:	2302      	movs	r3, #2
 800561a:	e131      	b.n	8005880 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005622:	2050      	movs	r0, #80	; 0x50
 8005624:	f002 fa00 	bl	8007a28 <malloc>
 8005628:	4603      	mov	r3, r0
 800562a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800563c:	2302      	movs	r3, #2
 800563e:	e11f      	b.n	8005880 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005640:	2250      	movs	r2, #80	; 0x50
 8005642:	2100      	movs	r1, #0
 8005644:	68b8      	ldr	r0, [r7, #8]
 8005646:	f002 f9ff 	bl	8007a48 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	211a      	movs	r1, #26
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	4413      	add	r3, r2
 8005656:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	b25b      	sxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	da15      	bge.n	800568e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	211a      	movs	r1, #26
 8005668:	fb01 f303 	mul.w	r3, r1, r3
 800566c:	4413      	add	r3, r2
 800566e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005672:	781a      	ldrb	r2, [r3, #0]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	211a      	movs	r1, #26
 800567e:	fb01 f303 	mul.w	r3, r1, r3
 8005682:	4413      	add	r3, r2
 8005684:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005688:	881a      	ldrh	r2, [r3, #0]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	785b      	ldrb	r3, [r3, #1]
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 fe32 	bl	80072fe <USBH_AllocPipe>
 800569a:	4603      	mov	r3, r0
 800569c:	461a      	mov	r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	7819      	ldrb	r1, [r3, #0]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	7858      	ldrb	r0, [r3, #1]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	8952      	ldrh	r2, [r2, #10]
 80056ba:	9202      	str	r2, [sp, #8]
 80056bc:	2203      	movs	r2, #3
 80056be:	9201      	str	r2, [sp, #4]
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	4623      	mov	r3, r4
 80056c4:	4602      	mov	r2, r0
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f001 fdea 	bl	80072a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2200      	movs	r2, #0
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f002 f8f9 	bl	80078cc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80056da:	2300      	movs	r3, #0
 80056dc:	2200      	movs	r2, #0
 80056de:	210a      	movs	r1, #10
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fbeb 	bl	8005ebc <USBH_FindInterface>
 80056e6:	4603      	mov	r3, r0
 80056e8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	2bff      	cmp	r3, #255	; 0xff
 80056ee:	d002      	beq.n	80056f6 <USBH_CDC_InterfaceInit+0x11a>
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d901      	bls.n	80056fa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80056f6:	2302      	movs	r3, #2
 80056f8:	e0c2      	b.n	8005880 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	211a      	movs	r1, #26
 8005700:	fb01 f303 	mul.w	r3, r1, r3
 8005704:	4413      	add	r3, r2
 8005706:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	b25b      	sxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	da16      	bge.n	8005740 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	211a      	movs	r1, #26
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	4413      	add	r3, r2
 800571e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005722:	781a      	ldrb	r2, [r3, #0]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	211a      	movs	r1, #26
 800572e:	fb01 f303 	mul.w	r3, r1, r3
 8005732:	4413      	add	r3, r2
 8005734:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005738:	881a      	ldrh	r2, [r3, #0]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	835a      	strh	r2, [r3, #26]
 800573e:	e015      	b.n	800576c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	211a      	movs	r1, #26
 8005746:	fb01 f303 	mul.w	r3, r1, r3
 800574a:	4413      	add	r3, r2
 800574c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005750:	781a      	ldrb	r2, [r3, #0]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	211a      	movs	r1, #26
 800575c:	fb01 f303 	mul.w	r3, r1, r3
 8005760:	4413      	add	r3, r2
 8005762:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005766:	881a      	ldrh	r2, [r3, #0]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	211a      	movs	r1, #26
 8005772:	fb01 f303 	mul.w	r3, r1, r3
 8005776:	4413      	add	r3, r2
 8005778:	f203 3356 	addw	r3, r3, #854	; 0x356
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	b25b      	sxtb	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	da16      	bge.n	80057b2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	211a      	movs	r1, #26
 800578a:	fb01 f303 	mul.w	r3, r1, r3
 800578e:	4413      	add	r3, r2
 8005790:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005794:	781a      	ldrb	r2, [r3, #0]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	211a      	movs	r1, #26
 80057a0:	fb01 f303 	mul.w	r3, r1, r3
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80057aa:	881a      	ldrh	r2, [r3, #0]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	835a      	strh	r2, [r3, #26]
 80057b0:	e015      	b.n	80057de <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	211a      	movs	r1, #26
 80057b8:	fb01 f303 	mul.w	r3, r1, r3
 80057bc:	4413      	add	r3, r2
 80057be:	f203 3356 	addw	r3, r3, #854	; 0x356
 80057c2:	781a      	ldrb	r2, [r3, #0]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	211a      	movs	r1, #26
 80057ce:	fb01 f303 	mul.w	r3, r1, r3
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80057d8:	881a      	ldrh	r2, [r3, #0]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	7b9b      	ldrb	r3, [r3, #14]
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 fd8a 	bl	80072fe <USBH_AllocPipe>
 80057ea:	4603      	mov	r3, r0
 80057ec:	461a      	mov	r2, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	7bdb      	ldrb	r3, [r3, #15]
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f001 fd80 	bl	80072fe <USBH_AllocPipe>
 80057fe:	4603      	mov	r3, r0
 8005800:	461a      	mov	r2, r3
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	7b59      	ldrb	r1, [r3, #13]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	7b98      	ldrb	r0, [r3, #14]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	8b12      	ldrh	r2, [r2, #24]
 800581e:	9202      	str	r2, [sp, #8]
 8005820:	2202      	movs	r2, #2
 8005822:	9201      	str	r2, [sp, #4]
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	4623      	mov	r3, r4
 8005828:	4602      	mov	r2, r0
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f001 fd38 	bl	80072a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	7b19      	ldrb	r1, [r3, #12]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	7bd8      	ldrb	r0, [r3, #15]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	8b52      	ldrh	r2, [r2, #26]
 8005848:	9202      	str	r2, [sp, #8]
 800584a:	2202      	movs	r2, #2
 800584c:	9201      	str	r2, [sp, #4]
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	4623      	mov	r3, r4
 8005852:	4602      	mov	r2, r0
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 fd23 	bl	80072a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	7b5b      	ldrb	r3, [r3, #13]
 8005866:	2200      	movs	r2, #0
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f002 f82e 	bl	80078cc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	7b1b      	ldrb	r3, [r3, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f002 f827 	bl	80078cc <USBH_LL_SetToggle>

  return USBH_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	bd90      	pop	{r4, r7, pc}

08005888 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00e      	beq.n	80058c0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f001 fd18 	bl	80072de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	4619      	mov	r1, r3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 fd43 	bl	8007340 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	7b1b      	ldrb	r3, [r3, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00e      	beq.n	80058e6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	7b1b      	ldrb	r3, [r3, #12]
 80058cc:	4619      	mov	r1, r3
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f001 fd05 	bl	80072de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	7b1b      	ldrb	r3, [r3, #12]
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f001 fd30 	bl	8007340 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	7b5b      	ldrb	r3, [r3, #13]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00e      	beq.n	800590c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	7b5b      	ldrb	r3, [r3, #13]
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f001 fcf2 	bl	80072de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	7b5b      	ldrb	r3, [r3, #13]
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 fd1d 	bl	8007340 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00b      	beq.n	8005930 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	4618      	mov	r0, r3
 8005922:	f002 f889 	bl	8007a38 <free>
    phost->pActiveClass->pData = 0U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800592c:	2200      	movs	r2, #0
 800592e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3340      	adds	r3, #64	; 0x40
 8005950:	4619      	mov	r1, r3
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f8b1 	bl	8005aba <GetLineCoding>
 8005958:	4603      	mov	r3, r0
 800595a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800595c:	7afb      	ldrb	r3, [r7, #11]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d105      	bne.n	800596e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005968:	2102      	movs	r1, #2
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800596e:	7afb      	ldrb	r3, [r7, #11]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005980:	2301      	movs	r3, #1
 8005982:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005984:	2300      	movs	r3, #0
 8005986:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005998:	2b04      	cmp	r3, #4
 800599a:	d877      	bhi.n	8005a8c <USBH_CDC_Process+0x114>
 800599c:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <USBH_CDC_Process+0x2c>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	080059b9 	.word	0x080059b9
 80059a8:	080059bf 	.word	0x080059bf
 80059ac:	080059ef 	.word	0x080059ef
 80059b0:	08005a63 	.word	0x08005a63
 80059b4:	08005a71 	.word	0x08005a71
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	73fb      	strb	r3, [r7, #15]
      break;
 80059bc:	e06d      	b.n	8005a9a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f897 	bl	8005af8 <SetLineCoding>
 80059ca:	4603      	mov	r3, r0
 80059cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80059ce:	7bbb      	ldrb	r3, [r7, #14]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80059dc:	e058      	b.n	8005a90 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80059de:	7bbb      	ldrb	r3, [r7, #14]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d055      	beq.n	8005a90 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2204      	movs	r2, #4
 80059e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80059ec:	e050      	b.n	8005a90 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	3340      	adds	r3, #64	; 0x40
 80059f2:	4619      	mov	r1, r3
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f860 	bl	8005aba <GetLineCoding>
 80059fa:	4603      	mov	r3, r0
 80059fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80059fe:	7bbb      	ldrb	r3, [r7, #14]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d126      	bne.n	8005a52 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a16:	791b      	ldrb	r3, [r3, #4]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d13b      	bne.n	8005a94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a26:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d133      	bne.n	8005a94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a36:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d12b      	bne.n	8005a94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a44:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d124      	bne.n	8005a94 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f958 	bl	8005d00 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005a50:	e020      	b.n	8005a94 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005a52:	7bbb      	ldrb	r3, [r7, #14]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d01d      	beq.n	8005a94 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2204      	movs	r2, #4
 8005a5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005a60:	e018      	b.n	8005a94 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f867 	bl	8005b36 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f8da 	bl	8005c22 <CDC_ProcessReception>
      break;
 8005a6e:	e014      	b.n	8005a9a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005a70:	2100      	movs	r1, #0
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 ffe3 	bl	8006a3e <USBH_ClrFeature>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a7c:	7bbb      	ldrb	r3, [r7, #14]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005a8a:	e005      	b.n	8005a98 <USBH_CDC_Process+0x120>

    default:
      break;
 8005a8c:	bf00      	nop
 8005a8e:	e004      	b.n	8005a9a <USBH_CDC_Process+0x122>
      break;
 8005a90:	bf00      	nop
 8005a92:	e002      	b.n	8005a9a <USBH_CDC_Process+0x122>
      break;
 8005a94:	bf00      	nop
 8005a96:	e000      	b.n	8005a9a <USBH_CDC_Process+0x122>
      break;
 8005a98:	bf00      	nop

  }

  return status;
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	22a1      	movs	r2, #161	; 0xa1
 8005ac8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2221      	movs	r2, #33	; 0x21
 8005ace:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2207      	movs	r2, #7
 8005ae0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2207      	movs	r2, #7
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f001 f988 	bl	8006dfe <USBH_CtlReq>
 8005aee:	4603      	mov	r3, r0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2221      	movs	r2, #33	; 0x21
 8005b06:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2207      	movs	r2, #7
 8005b1e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2207      	movs	r2, #7
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 f969 	bl	8006dfe <USBH_CtlReq>
 8005b2c:	4603      	mov	r3, r0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b086      	sub	sp, #24
 8005b3a:	af02      	add	r7, sp, #8
 8005b3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d002      	beq.n	8005b5c <CDC_ProcessTransmission+0x26>
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d023      	beq.n	8005ba2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005b5a:	e05e      	b.n	8005c1a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	8b12      	ldrh	r2, [r2, #24]
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d90b      	bls.n	8005b80 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	69d9      	ldr	r1, [r3, #28]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8b1a      	ldrh	r2, [r3, #24]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	7b5b      	ldrb	r3, [r3, #13]
 8005b74:	2001      	movs	r0, #1
 8005b76:	9000      	str	r0, [sp, #0]
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f001 fb4e 	bl	800721a <USBH_BulkSendData>
 8005b7e:	e00b      	b.n	8005b98 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	7b5b      	ldrb	r3, [r3, #13]
 8005b8e:	2001      	movs	r0, #1
 8005b90:	9000      	str	r0, [sp, #0]
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 fb41 	bl	800721a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ba0:	e03b      	b.n	8005c1a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	7b5b      	ldrb	r3, [r3, #13]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f001 fe65 	bl	8007878 <USBH_LL_GetURBState>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005bb2:	7afb      	ldrb	r3, [r7, #11]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d128      	bne.n	8005c0a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	8b12      	ldrh	r2, [r2, #24]
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d90e      	bls.n	8005be2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	8b12      	ldrh	r2, [r2, #24]
 8005bcc:	1a9a      	subs	r2, r3, r2
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	8b12      	ldrh	r2, [r2, #24]
 8005bda:	441a      	add	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	61da      	str	r2, [r3, #28]
 8005be0:	e002      	b.n	8005be8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005bf8:	e00e      	b.n	8005c18 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f868 	bl	8005cd8 <USBH_CDC_TransmitCallback>
      break;
 8005c08:	e006      	b.n	8005c18 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005c0a:	7afb      	ldrb	r3, [r7, #11]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d103      	bne.n	8005c18 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c18:	bf00      	nop
  }
}
 8005c1a:	bf00      	nop
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b086      	sub	sp, #24
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d002      	beq.n	8005c48 <CDC_ProcessReception+0x26>
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d00e      	beq.n	8005c64 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005c46:	e043      	b.n	8005cd0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	6a19      	ldr	r1, [r3, #32]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	8b5a      	ldrh	r2, [r3, #26]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	7b1b      	ldrb	r3, [r3, #12]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f001 fb05 	bl	8007264 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005c62:	e035      	b.n	8005cd0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	7b1b      	ldrb	r3, [r3, #12]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f001 fe04 	bl	8007878 <USBH_LL_GetURBState>
 8005c70:	4603      	mov	r3, r0
 8005c72:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005c74:	7cfb      	ldrb	r3, [r7, #19]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d129      	bne.n	8005cce <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	7b1b      	ldrb	r3, [r3, #12]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 fd67 	bl	8007754 <USBH_LL_GetLastXferSize>
 8005c86:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d016      	beq.n	8005cc0 <CDC_ProcessReception+0x9e>
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	8b5b      	ldrh	r3, [r3, #26]
 8005c96:	461a      	mov	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d910      	bls.n	8005cc0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad2      	subs	r2, r2, r3
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	6a1a      	ldr	r2, [r3, #32]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	441a      	add	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2203      	movs	r2, #3
 8005cba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005cbe:	e006      	b.n	8005cce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f80f 	bl	8005cec <USBH_CDC_ReceiveCallback>
      break;
 8005cce:	bf00      	nop
  }
}
 8005cd0:	bf00      	nop
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e029      	b.n	8005d80 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	79fa      	ldrb	r2, [r7, #7]
 8005d30:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f81f 	bl	8005d88 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f001 fc37 	bl	80075ec <USBH_LL_Init>

  return USBH_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e009      	b.n	8005dae <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	33e0      	adds	r3, #224	; 0xe0
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	2200      	movs	r2, #0
 8005da6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3301      	adds	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b0e      	cmp	r3, #14
 8005db2:	d9f2      	bls.n	8005d9a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	e009      	b.n	8005dce <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd4:	d3f1      	bcc.n	8005dba <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2240      	movs	r2, #64	; 0x40
 8005dfa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d016      	beq.n	8005e72 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10e      	bne.n	8005e6c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005e54:	1c59      	adds	r1, r3, #1
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	33de      	adds	r3, #222	; 0xde
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	73fb      	strb	r3, [r7, #15]
 8005e6a:	e004      	b.n	8005e76 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	73fb      	strb	r3, [r7, #15]
 8005e70:	e001      	b.n	8005e76 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005e72:	2302      	movs	r3, #2
 8005e74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005e9a:	78fa      	ldrb	r2, [r7, #3]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d204      	bcs.n	8005eaa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	78fa      	ldrb	r2, [r7, #3]
 8005ea4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005ea8:	e001      	b.n	8005eae <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005eaa:	2302      	movs	r3, #2
 8005eac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4603      	mov	r3, r0
 8005ecc:	70fb      	strb	r3, [r7, #3]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	70bb      	strb	r3, [r7, #2]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005ee4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ee6:	e025      	b.n	8005f34 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	221a      	movs	r2, #26
 8005eec:	fb02 f303 	mul.w	r3, r2, r3
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	3302      	adds	r3, #2
 8005ef8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	795b      	ldrb	r3, [r3, #5]
 8005efe:	78fa      	ldrb	r2, [r7, #3]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d002      	beq.n	8005f0a <USBH_FindInterface+0x4e>
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	2bff      	cmp	r3, #255	; 0xff
 8005f08:	d111      	bne.n	8005f2e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005f0e:	78ba      	ldrb	r2, [r7, #2]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d002      	beq.n	8005f1a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f14:	78bb      	ldrb	r3, [r7, #2]
 8005f16:	2bff      	cmp	r3, #255	; 0xff
 8005f18:	d109      	bne.n	8005f2e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005f1e:	787a      	ldrb	r2, [r7, #1]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d002      	beq.n	8005f2a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005f24:	787b      	ldrb	r3, [r7, #1]
 8005f26:	2bff      	cmp	r3, #255	; 0xff
 8005f28:	d101      	bne.n	8005f2e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005f2a:	7dfb      	ldrb	r3, [r7, #23]
 8005f2c:	e006      	b.n	8005f3c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005f2e:	7dfb      	ldrb	r3, [r7, #23]
 8005f30:	3301      	adds	r3, #1
 8005f32:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d9d6      	bls.n	8005ee8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005f3a:	23ff      	movs	r3, #255	; 0xff
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f001 fb87 	bl	8007664 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005f56:	2101      	movs	r1, #1
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f001 fca0 	bl	800789e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af04      	add	r7, sp, #16
 8005f6e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005f70:	2302      	movs	r3, #2
 8005f72:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d102      	bne.n	8005f8a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2203      	movs	r2, #3
 8005f88:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b0b      	cmp	r3, #11
 8005f92:	f200 81b3 	bhi.w	80062fc <USBH_Process+0x394>
 8005f96:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <USBH_Process+0x34>)
 8005f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9c:	08005fcd 	.word	0x08005fcd
 8005fa0:	08005fff 	.word	0x08005fff
 8005fa4:	08006067 	.word	0x08006067
 8005fa8:	08006297 	.word	0x08006297
 8005fac:	080062fd 	.word	0x080062fd
 8005fb0:	0800610b 	.word	0x0800610b
 8005fb4:	0800623d 	.word	0x0800623d
 8005fb8:	08006141 	.word	0x08006141
 8005fbc:	08006161 	.word	0x08006161
 8005fc0:	08006181 	.word	0x08006181
 8005fc4:	080061af 	.word	0x080061af
 8005fc8:	0800627f 	.word	0x0800627f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 8193 	beq.w	8006300 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005fe0:	20c8      	movs	r0, #200	; 0xc8
 8005fe2:	f001 fca3 	bl	800792c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f001 fb99 	bl	800771e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005ffc:	e180      	b.n	8006300 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006004:	2b01      	cmp	r3, #1
 8006006:	d107      	bne.n	8006018 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006016:	e182      	b.n	800631e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800601e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006022:	d914      	bls.n	800604e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800602a:	3301      	adds	r3, #1
 800602c:	b2da      	uxtb	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800603a:	2b03      	cmp	r3, #3
 800603c:	d903      	bls.n	8006046 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	220d      	movs	r2, #13
 8006042:	701a      	strb	r2, [r3, #0]
      break;
 8006044:	e16b      	b.n	800631e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	701a      	strb	r2, [r3, #0]
      break;
 800604c:	e167      	b.n	800631e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006054:	f103 020a 	add.w	r2, r3, #10
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800605e:	200a      	movs	r0, #10
 8006060:	f001 fc64 	bl	800792c <USBH_Delay>
      break;
 8006064:	e15b      	b.n	800631e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006076:	2104      	movs	r1, #4
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800607c:	2064      	movs	r0, #100	; 0x64
 800607e:	f001 fc55 	bl	800792c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f001 fb24 	bl	80076d0 <USBH_LL_GetSpeed>
 8006088:	4603      	mov	r3, r0
 800608a:	461a      	mov	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2205      	movs	r2, #5
 8006096:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006098:	2100      	movs	r1, #0
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f001 f92f 	bl	80072fe <USBH_AllocPipe>
 80060a0:	4603      	mov	r3, r0
 80060a2:	461a      	mov	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80060a8:	2180      	movs	r1, #128	; 0x80
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 f927 	bl	80072fe <USBH_AllocPipe>
 80060b0:	4603      	mov	r3, r0
 80060b2:	461a      	mov	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	7919      	ldrb	r1, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80060cc:	b292      	uxth	r2, r2
 80060ce:	9202      	str	r2, [sp, #8]
 80060d0:	2200      	movs	r2, #0
 80060d2:	9201      	str	r2, [sp, #4]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	4603      	mov	r3, r0
 80060d8:	2280      	movs	r2, #128	; 0x80
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f001 f8e0 	bl	80072a0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7959      	ldrb	r1, [r3, #5]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80060f4:	b292      	uxth	r2, r2
 80060f6:	9202      	str	r2, [sp, #8]
 80060f8:	2200      	movs	r2, #0
 80060fa:	9201      	str	r2, [sp, #4]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	4603      	mov	r3, r0
 8006100:	2200      	movs	r2, #0
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 f8cc 	bl	80072a0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006108:	e109      	b.n	800631e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f90c 	bl	8006328 <USBH_HandleEnum>
 8006110:	4603      	mov	r3, r0
 8006112:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006114:	7bbb      	ldrb	r3, [r7, #14]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	f040 80f3 	bne.w	8006304 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800612c:	2b01      	cmp	r3, #1
 800612e:	d103      	bne.n	8006138 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2208      	movs	r2, #8
 8006134:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006136:	e0e5      	b.n	8006304 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2207      	movs	r2, #7
 800613c:	701a      	strb	r2, [r3, #0]
      break;
 800613e:	e0e1      	b.n	8006304 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 80de 	beq.w	8006308 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006152:	2101      	movs	r1, #1
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2208      	movs	r2, #8
 800615c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800615e:	e0d3      	b.n	8006308 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006166:	b29b      	uxth	r3, r3
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fc20 	bl	80069b0 <USBH_SetCfg>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	f040 80ca 	bne.w	800630c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2209      	movs	r2, #9
 800617c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800617e:	e0c5      	b.n	800630c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00b      	beq.n	80061a6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800618e:	2101      	movs	r1, #1
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fc30 	bl	80069f6 <USBH_SetFeature>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	f040 80b9 	bne.w	8006310 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	220a      	movs	r2, #10
 80061a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80061a4:	e0b4      	b.n	8006310 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	220a      	movs	r2, #10
 80061aa:	701a      	strb	r2, [r3, #0]
      break;
 80061ac:	e0b0      	b.n	8006310 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 80ad 	beq.w	8006314 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80061c2:	2300      	movs	r3, #0
 80061c4:	73fb      	strb	r3, [r7, #15]
 80061c6:	e016      	b.n	80061f6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80061c8:	7bfa      	ldrb	r2, [r7, #15]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	32de      	adds	r2, #222	; 0xde
 80061ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d2:	791a      	ldrb	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80061da:	429a      	cmp	r2, r3
 80061dc:	d108      	bne.n	80061f0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80061de:	7bfa      	ldrb	r2, [r7, #15]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	32de      	adds	r2, #222	; 0xde
 80061e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80061ee:	e005      	b.n	80061fc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	3301      	adds	r3, #1
 80061f4:	73fb      	strb	r3, [r7, #15]
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0e5      	beq.n	80061c8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d016      	beq.n	8006234 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	4798      	blx	r3
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d109      	bne.n	800622c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2206      	movs	r2, #6
 800621c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006224:	2103      	movs	r1, #3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800622a:	e073      	b.n	8006314 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	220d      	movs	r2, #13
 8006230:	701a      	strb	r2, [r3, #0]
      break;
 8006232:	e06f      	b.n	8006314 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	220d      	movs	r2, #13
 8006238:	701a      	strb	r2, [r3, #0]
      break;
 800623a:	e06b      	b.n	8006314 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d017      	beq.n	8006276 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	4798      	blx	r3
 8006252:	4603      	mov	r3, r0
 8006254:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006256:	7bbb      	ldrb	r3, [r7, #14]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d103      	bne.n	8006266 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	220b      	movs	r2, #11
 8006262:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006264:	e058      	b.n	8006318 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006266:	7bbb      	ldrb	r3, [r7, #14]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d154      	bne.n	8006318 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	220d      	movs	r2, #13
 8006272:	701a      	strb	r2, [r3, #0]
      break;
 8006274:	e050      	b.n	8006318 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	220d      	movs	r2, #13
 800627a:	701a      	strb	r2, [r3, #0]
      break;
 800627c:	e04c      	b.n	8006318 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006284:	2b00      	cmp	r3, #0
 8006286:	d049      	beq.n	800631c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	4798      	blx	r3
      }
      break;
 8006294:	e042      	b.n	800631c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff fd72 	bl	8005d88 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062d2:	2105      	movs	r1, #5
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d107      	bne.n	80062f4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff fe2b 	bl	8005f48 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80062f2:	e014      	b.n	800631e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 f9b5 	bl	8007664 <USBH_LL_Start>
      break;
 80062fa:	e010      	b.n	800631e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80062fc:	bf00      	nop
 80062fe:	e00e      	b.n	800631e <USBH_Process+0x3b6>
      break;
 8006300:	bf00      	nop
 8006302:	e00c      	b.n	800631e <USBH_Process+0x3b6>
      break;
 8006304:	bf00      	nop
 8006306:	e00a      	b.n	800631e <USBH_Process+0x3b6>
    break;
 8006308:	bf00      	nop
 800630a:	e008      	b.n	800631e <USBH_Process+0x3b6>
      break;
 800630c:	bf00      	nop
 800630e:	e006      	b.n	800631e <USBH_Process+0x3b6>
      break;
 8006310:	bf00      	nop
 8006312:	e004      	b.n	800631e <USBH_Process+0x3b6>
      break;
 8006314:	bf00      	nop
 8006316:	e002      	b.n	800631e <USBH_Process+0x3b6>
      break;
 8006318:	bf00      	nop
 800631a:	e000      	b.n	800631e <USBH_Process+0x3b6>
      break;
 800631c:	bf00      	nop
  }
  return USBH_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b088      	sub	sp, #32
 800632c:	af04      	add	r7, sp, #16
 800632e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006330:	2301      	movs	r3, #1
 8006332:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006334:	2301      	movs	r3, #1
 8006336:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	2b07      	cmp	r3, #7
 800633e:	f200 81c1 	bhi.w	80066c4 <USBH_HandleEnum+0x39c>
 8006342:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <USBH_HandleEnum+0x20>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	08006369 	.word	0x08006369
 800634c:	08006427 	.word	0x08006427
 8006350:	08006491 	.word	0x08006491
 8006354:	0800651f 	.word	0x0800651f
 8006358:	08006589 	.word	0x08006589
 800635c:	080065f9 	.word	0x080065f9
 8006360:	0800663f 	.word	0x0800663f
 8006364:	08006685 	.word	0x08006685
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006368:	2108      	movs	r1, #8
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fa50 	bl	8006810 <USBH_Get_DevDesc>
 8006370:	4603      	mov	r3, r0
 8006372:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d130      	bne.n	80063dc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	7919      	ldrb	r1, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800639e:	b292      	uxth	r2, r2
 80063a0:	9202      	str	r2, [sp, #8]
 80063a2:	2200      	movs	r2, #0
 80063a4:	9201      	str	r2, [sp, #4]
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	4603      	mov	r3, r0
 80063aa:	2280      	movs	r2, #128	; 0x80
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 ff77 	bl	80072a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	7959      	ldrb	r1, [r3, #5]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80063c6:	b292      	uxth	r2, r2
 80063c8:	9202      	str	r2, [sp, #8]
 80063ca:	2200      	movs	r2, #0
 80063cc:	9201      	str	r2, [sp, #4]
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	4603      	mov	r3, r0
 80063d2:	2200      	movs	r2, #0
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 ff63 	bl	80072a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80063da:	e175      	b.n	80066c8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063dc:	7bbb      	ldrb	r3, [r7, #14]
 80063de:	2b03      	cmp	r3, #3
 80063e0:	f040 8172 	bne.w	80066c8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063ea:	3301      	adds	r3, #1
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d903      	bls.n	8006406 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	220d      	movs	r2, #13
 8006402:	701a      	strb	r2, [r3, #0]
      break;
 8006404:	e160      	b.n	80066c8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	795b      	ldrb	r3, [r3, #5]
 800640a:	4619      	mov	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 ff97 	bl	8007340 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	791b      	ldrb	r3, [r3, #4]
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 ff91 	bl	8007340 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	701a      	strb	r2, [r3, #0]
      break;
 8006424:	e150      	b.n	80066c8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006426:	2112      	movs	r1, #18
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f9f1 	bl	8006810 <USBH_Get_DevDesc>
 800642e:	4603      	mov	r3, r0
 8006430:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d103      	bne.n	8006440 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800643e:	e145      	b.n	80066cc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006440:	7bbb      	ldrb	r3, [r7, #14]
 8006442:	2b03      	cmp	r3, #3
 8006444:	f040 8142 	bne.w	80066cc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800644e:	3301      	adds	r3, #1
 8006450:	b2da      	uxtb	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800645e:	2b03      	cmp	r3, #3
 8006460:	d903      	bls.n	800646a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	220d      	movs	r2, #13
 8006466:	701a      	strb	r2, [r3, #0]
      break;
 8006468:	e130      	b.n	80066cc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	795b      	ldrb	r3, [r3, #5]
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 ff65 	bl	8007340 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	791b      	ldrb	r3, [r3, #4]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 ff5f 	bl	8007340 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	701a      	strb	r2, [r3, #0]
      break;
 800648e:	e11d      	b.n	80066cc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006490:	2101      	movs	r1, #1
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fa68 	bl	8006968 <USBH_SetAddress>
 8006498:	4603      	mov	r3, r0
 800649a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d132      	bne.n	8006508 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80064a2:	2002      	movs	r0, #2
 80064a4:	f001 fa42 	bl	800792c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2203      	movs	r2, #3
 80064b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	7919      	ldrb	r1, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80064ca:	b292      	uxth	r2, r2
 80064cc:	9202      	str	r2, [sp, #8]
 80064ce:	2200      	movs	r2, #0
 80064d0:	9201      	str	r2, [sp, #4]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	4603      	mov	r3, r0
 80064d6:	2280      	movs	r2, #128	; 0x80
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fee1 	bl	80072a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	7959      	ldrb	r1, [r3, #5]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064f2:	b292      	uxth	r2, r2
 80064f4:	9202      	str	r2, [sp, #8]
 80064f6:	2200      	movs	r2, #0
 80064f8:	9201      	str	r2, [sp, #4]
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	4603      	mov	r3, r0
 80064fe:	2200      	movs	r2, #0
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fecd 	bl	80072a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006506:	e0e3      	b.n	80066d0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	2b03      	cmp	r3, #3
 800650c:	f040 80e0 	bne.w	80066d0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	220d      	movs	r2, #13
 8006514:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	705a      	strb	r2, [r3, #1]
      break;
 800651c:	e0d8      	b.n	80066d0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800651e:	2109      	movs	r1, #9
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f99d 	bl	8006860 <USBH_Get_CfgDesc>
 8006526:	4603      	mov	r3, r0
 8006528:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800652a:	7bbb      	ldrb	r3, [r7, #14]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d103      	bne.n	8006538 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2204      	movs	r2, #4
 8006534:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006536:	e0cd      	b.n	80066d4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006538:	7bbb      	ldrb	r3, [r7, #14]
 800653a:	2b03      	cmp	r3, #3
 800653c:	f040 80ca 	bne.w	80066d4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006546:	3301      	adds	r3, #1
 8006548:	b2da      	uxtb	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006556:	2b03      	cmp	r3, #3
 8006558:	d903      	bls.n	8006562 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	220d      	movs	r2, #13
 800655e:	701a      	strb	r2, [r3, #0]
      break;
 8006560:	e0b8      	b.n	80066d4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	795b      	ldrb	r3, [r3, #5]
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fee9 	bl	8007340 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	791b      	ldrb	r3, [r3, #4]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fee3 	bl	8007340 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	701a      	strb	r2, [r3, #0]
      break;
 8006586:	e0a5      	b.n	80066d4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f965 	bl	8006860 <USBH_Get_CfgDesc>
 8006596:	4603      	mov	r3, r0
 8006598:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800659a:	7bbb      	ldrb	r3, [r7, #14]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d103      	bne.n	80065a8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2205      	movs	r2, #5
 80065a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80065a6:	e097      	b.n	80066d8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	f040 8094 	bne.w	80066d8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065b6:	3301      	adds	r3, #1
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d903      	bls.n	80065d2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	220d      	movs	r2, #13
 80065ce:	701a      	strb	r2, [r3, #0]
      break;
 80065d0:	e082      	b.n	80066d8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	795b      	ldrb	r3, [r3, #5]
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 feb1 	bl	8007340 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	791b      	ldrb	r3, [r3, #4]
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 feab 	bl	8007340 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	701a      	strb	r2, [r3, #0]
      break;
 80065f6:	e06f      	b.n	80066d8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d019      	beq.n	8006636 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800660e:	23ff      	movs	r3, #255	; 0xff
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f949 	bl	80068a8 <USBH_Get_StringDesc>
 8006616:	4603      	mov	r3, r0
 8006618:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d103      	bne.n	8006628 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2206      	movs	r2, #6
 8006624:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006626:	e059      	b.n	80066dc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006628:	7bbb      	ldrb	r3, [r7, #14]
 800662a:	2b03      	cmp	r3, #3
 800662c:	d156      	bne.n	80066dc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2206      	movs	r2, #6
 8006632:	705a      	strb	r2, [r3, #1]
      break;
 8006634:	e052      	b.n	80066dc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2206      	movs	r2, #6
 800663a:	705a      	strb	r2, [r3, #1]
      break;
 800663c:	e04e      	b.n	80066dc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006644:	2b00      	cmp	r3, #0
 8006646:	d019      	beq.n	800667c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006654:	23ff      	movs	r3, #255	; 0xff
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f926 	bl	80068a8 <USBH_Get_StringDesc>
 800665c:	4603      	mov	r3, r0
 800665e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006660:	7bbb      	ldrb	r3, [r7, #14]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2207      	movs	r2, #7
 800666a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800666c:	e038      	b.n	80066e0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	2b03      	cmp	r3, #3
 8006672:	d135      	bne.n	80066e0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2207      	movs	r2, #7
 8006678:	705a      	strb	r2, [r3, #1]
      break;
 800667a:	e031      	b.n	80066e0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2207      	movs	r2, #7
 8006680:	705a      	strb	r2, [r3, #1]
      break;
 8006682:	e02d      	b.n	80066e0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800668a:	2b00      	cmp	r3, #0
 800668c:	d017      	beq.n	80066be <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800669a:	23ff      	movs	r3, #255	; 0xff
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f903 	bl	80068a8 <USBH_Get_StringDesc>
 80066a2:	4603      	mov	r3, r0
 80066a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80066a6:	7bbb      	ldrb	r3, [r7, #14]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d102      	bne.n	80066b2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80066b0:	e018      	b.n	80066e4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066b2:	7bbb      	ldrb	r3, [r7, #14]
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d115      	bne.n	80066e4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]
      break;
 80066bc:	e012      	b.n	80066e4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]
      break;
 80066c2:	e00f      	b.n	80066e4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80066c4:	bf00      	nop
 80066c6:	e00e      	b.n	80066e6 <USBH_HandleEnum+0x3be>
      break;
 80066c8:	bf00      	nop
 80066ca:	e00c      	b.n	80066e6 <USBH_HandleEnum+0x3be>
      break;
 80066cc:	bf00      	nop
 80066ce:	e00a      	b.n	80066e6 <USBH_HandleEnum+0x3be>
      break;
 80066d0:	bf00      	nop
 80066d2:	e008      	b.n	80066e6 <USBH_HandleEnum+0x3be>
      break;
 80066d4:	bf00      	nop
 80066d6:	e006      	b.n	80066e6 <USBH_HandleEnum+0x3be>
      break;
 80066d8:	bf00      	nop
 80066da:	e004      	b.n	80066e6 <USBH_HandleEnum+0x3be>
      break;
 80066dc:	bf00      	nop
 80066de:	e002      	b.n	80066e6 <USBH_HandleEnum+0x3be>
      break;
 80066e0:	bf00      	nop
 80066e2:	e000      	b.n	80066e6 <USBH_HandleEnum+0x3be>
      break;
 80066e4:	bf00      	nop
  }
  return Status;
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f804 	bl	8006732 <USBH_HandleSof>
}
 800672a:	bf00      	nop
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b0b      	cmp	r3, #11
 8006742:	d10a      	bne.n	800675a <USBH_HandleSof+0x28>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d005      	beq.n	800675a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
  }
}
 800675a:	bf00      	nop
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006772:	bf00      	nop
}
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800678e:	bf00      	nop
}
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 ff56 	bl	800769a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	791b      	ldrb	r3, [r3, #4]
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fda3 	bl	8007340 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	795b      	ldrb	r3, [r3, #5]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fd9d 	bl	8007340 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af02      	add	r7, sp, #8
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006822:	78fb      	ldrb	r3, [r7, #3]
 8006824:	b29b      	uxth	r3, r3
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800682e:	2100      	movs	r1, #0
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f864 	bl	80068fe <USBH_GetDescriptor>
 8006836:	4603      	mov	r3, r0
 8006838:	73fb      	strb	r3, [r7, #15]
 800683a:	7bfb      	ldrb	r3, [r7, #15]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800684c:	78fa      	ldrb	r2, [r7, #3]
 800684e:	b292      	uxth	r2, r2
 8006850:	4619      	mov	r1, r3
 8006852:	f000 f918 	bl	8006a86 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006856:	7bfb      	ldrb	r3, [r7, #15]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af02      	add	r7, sp, #8
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	331c      	adds	r3, #28
 8006870:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006872:	887b      	ldrh	r3, [r7, #2]
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800687c:	2100      	movs	r1, #0
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f83d 	bl	80068fe <USBH_GetDescriptor>
 8006884:	4603      	mov	r3, r0
 8006886:	72fb      	strb	r3, [r7, #11]
 8006888:	7afb      	ldrb	r3, [r7, #11]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d107      	bne.n	800689e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006894:	887a      	ldrh	r2, [r7, #2]
 8006896:	68f9      	ldr	r1, [r7, #12]
 8006898:	4618      	mov	r0, r3
 800689a:	f000 f964 	bl	8006b66 <USBH_ParseCfgDesc>
  }

  return status;
 800689e:	7afb      	ldrb	r3, [r7, #11]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af02      	add	r7, sp, #8
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	607a      	str	r2, [r7, #4]
 80068b2:	461a      	mov	r2, r3
 80068b4:	460b      	mov	r3, r1
 80068b6:	72fb      	strb	r3, [r7, #11]
 80068b8:	4613      	mov	r3, r2
 80068ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80068bc:	7afb      	ldrb	r3, [r7, #11]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80068c4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80068cc:	893b      	ldrh	r3, [r7, #8]
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	460b      	mov	r3, r1
 80068d2:	2100      	movs	r1, #0
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 f812 	bl	80068fe <USBH_GetDescriptor>
 80068da:	4603      	mov	r3, r0
 80068dc:	75fb      	strb	r3, [r7, #23]
 80068de:	7dfb      	ldrb	r3, [r7, #23]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d107      	bne.n	80068f4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80068ea:	893a      	ldrh	r2, [r7, #8]
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fa37 	bl	8006d62 <USBH_ParseStringDesc>
  }

  return status;
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	607b      	str	r3, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	72fb      	strb	r3, [r7, #11]
 800690c:	4613      	mov	r3, r2
 800690e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	789b      	ldrb	r3, [r3, #2]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d11c      	bne.n	8006952 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006918:	7afb      	ldrb	r3, [r7, #11]
 800691a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800691e:	b2da      	uxtb	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2206      	movs	r2, #6
 8006928:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	893a      	ldrh	r2, [r7, #8]
 800692e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006930:	893b      	ldrh	r3, [r7, #8]
 8006932:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800693a:	d104      	bne.n	8006946 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f240 4209 	movw	r2, #1033	; 0x409
 8006942:	829a      	strh	r2, [r3, #20]
 8006944:	e002      	b.n	800694c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8b3a      	ldrh	r2, [r7, #24]
 8006950:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006952:	8b3b      	ldrh	r3, [r7, #24]
 8006954:	461a      	mov	r2, r3
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fa50 	bl	8006dfe <USBH_CtlReq>
 800695e:	4603      	mov	r3, r0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	789b      	ldrb	r3, [r3, #2]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d10f      	bne.n	800699c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2205      	movs	r2, #5
 8006986:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	b29a      	uxth	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800699c:	2200      	movs	r2, #0
 800699e:	2100      	movs	r1, #0
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fa2c 	bl	8006dfe <USBH_CtlReq>
 80069a6:	4603      	mov	r3, r0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	789b      	ldrb	r3, [r3, #2]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d10e      	bne.n	80069e2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2209      	movs	r2, #9
 80069ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	887a      	ldrh	r2, [r7, #2]
 80069d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80069e2:	2200      	movs	r2, #0
 80069e4:	2100      	movs	r1, #0
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa09 	bl	8006dfe <USBH_CtlReq>
 80069ec:	4603      	mov	r3, r0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	789b      	ldrb	r3, [r3, #2]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d10f      	bne.n	8006a2a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2203      	movs	r2, #3
 8006a14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006a16:	78fb      	ldrb	r3, [r7, #3]
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f9e5 	bl	8006dfe <USBH_CtlReq>
 8006a34:	4603      	mov	r3, r0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b082      	sub	sp, #8
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	460b      	mov	r3, r1
 8006a48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	789b      	ldrb	r3, [r3, #2]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d10f      	bne.n	8006a72 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2202      	movs	r2, #2
 8006a56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006a64:	78fb      	ldrb	r3, [r7, #3]
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006a72:	2200      	movs	r2, #0
 8006a74:	2100      	movs	r1, #0
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f9c1 	bl	8006dfe <USBH_CtlReq>
 8006a7c:	4603      	mov	r3, r0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	4613      	mov	r3, r2
 8006a92:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	781a      	ldrb	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	785a      	ldrb	r2, [r3, #1]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	3302      	adds	r3, #2
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	3303      	adds	r3, #3
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	021b      	lsls	r3, r3, #8
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	791a      	ldrb	r2, [r3, #4]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	795a      	ldrb	r2, [r3, #5]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	799a      	ldrb	r2, [r3, #6]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	79da      	ldrb	r2, [r3, #7]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006ae0:	88fb      	ldrh	r3, [r7, #6]
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d939      	bls.n	8006b5a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	3308      	adds	r3, #8
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	3309      	adds	r3, #9
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	021b      	lsls	r3, r3, #8
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	4313      	orrs	r3, r2
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	330a      	adds	r3, #10
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	330b      	adds	r3, #11
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	4313      	orrs	r3, r2
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	330c      	adds	r3, #12
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	330d      	adds	r3, #13
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	021b      	lsls	r3, r3, #8
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	4313      	orrs	r3, r2
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	7b9a      	ldrb	r2, [r3, #14]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	7bda      	ldrb	r2, [r3, #15]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	7c1a      	ldrb	r2, [r3, #16]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	7c5a      	ldrb	r2, [r3, #17]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	745a      	strb	r2, [r3, #17]
  }
}
 8006b5a:	bf00      	nop
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b08a      	sub	sp, #40	; 0x28
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	4613      	mov	r3, r2
 8006b72:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	781a      	ldrb	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	785a      	ldrb	r2, [r3, #1]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	3302      	adds	r3, #2
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	3303      	adds	r3, #3
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	021b      	lsls	r3, r3, #8
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	4313      	orrs	r3, r2
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	791a      	ldrb	r2, [r3, #4]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	795a      	ldrb	r2, [r3, #5]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	799a      	ldrb	r2, [r3, #6]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	79da      	ldrb	r2, [r3, #7]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	7a1a      	ldrb	r2, [r3, #8]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006bdc:	88fb      	ldrh	r3, [r7, #6]
 8006bde:	2b09      	cmp	r3, #9
 8006be0:	d95f      	bls.n	8006ca2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006be2:	2309      	movs	r3, #9
 8006be4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006bea:	e051      	b.n	8006c90 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006bec:	f107 0316 	add.w	r3, r7, #22
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bf4:	f000 f8e8 	bl	8006dc8 <USBH_GetNextDesc>
 8006bf8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	785b      	ldrb	r3, [r3, #1]
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d146      	bne.n	8006c90 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006c02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c06:	221a      	movs	r2, #26
 8006c08:	fb02 f303 	mul.w	r3, r2, r3
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	4413      	add	r3, r2
 8006c12:	3302      	adds	r3, #2
 8006c14:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c18:	69f8      	ldr	r0, [r7, #28]
 8006c1a:	f000 f846 	bl	8006caa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006c28:	e022      	b.n	8006c70 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006c2a:	f107 0316 	add.w	r3, r7, #22
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c32:	f000 f8c9 	bl	8006dc8 <USBH_GetNextDesc>
 8006c36:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	785b      	ldrb	r3, [r3, #1]
 8006c3c:	2b05      	cmp	r3, #5
 8006c3e:	d117      	bne.n	8006c70 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006c40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c44:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006c48:	3201      	adds	r2, #1
 8006c4a:	00d2      	lsls	r2, r2, #3
 8006c4c:	211a      	movs	r1, #26
 8006c4e:	fb01 f303 	mul.w	r3, r1, r3
 8006c52:	4413      	add	r3, r2
 8006c54:	3308      	adds	r3, #8
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	4413      	add	r3, r2
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006c5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c60:	69b8      	ldr	r0, [r7, #24]
 8006c62:	f000 f851 	bl	8006d08 <USBH_ParseEPDesc>
            ep_ix++;
 8006c66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	791b      	ldrb	r3, [r3, #4]
 8006c74:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d204      	bcs.n	8006c86 <USBH_ParseCfgDesc+0x120>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	885a      	ldrh	r2, [r3, #2]
 8006c80:	8afb      	ldrh	r3, [r7, #22]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d8d1      	bhi.n	8006c2a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d804      	bhi.n	8006ca2 <USBH_ParseCfgDesc+0x13c>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	885a      	ldrh	r2, [r3, #2]
 8006c9c:	8afb      	ldrh	r3, [r7, #22]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d8a4      	bhi.n	8006bec <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006ca2:	bf00      	nop
 8006ca4:	3728      	adds	r7, #40	; 0x28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781a      	ldrb	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	785a      	ldrb	r2, [r3, #1]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	789a      	ldrb	r2, [r3, #2]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	78da      	ldrb	r2, [r3, #3]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	791a      	ldrb	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	795a      	ldrb	r2, [r3, #5]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	799a      	ldrb	r2, [r3, #6]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	79da      	ldrb	r2, [r3, #7]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	7a1a      	ldrb	r2, [r3, #8]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	721a      	strb	r2, [r3, #8]
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781a      	ldrb	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	785a      	ldrb	r2, [r3, #1]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	789a      	ldrb	r2, [r3, #2]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	78da      	ldrb	r2, [r3, #3]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	3304      	adds	r3, #4
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	3305      	adds	r3, #5
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	021b      	lsls	r3, r3, #8
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	4313      	orrs	r3, r2
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	799a      	ldrb	r2, [r3, #6]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	719a      	strb	r2, [r3, #6]
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b087      	sub	sp, #28
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	3301      	adds	r3, #1
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d120      	bne.n	8006dbc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	1e9a      	subs	r2, r3, #2
 8006d80:	88fb      	ldrh	r3, [r7, #6]
 8006d82:	4293      	cmp	r3, r2
 8006d84:	bf28      	it	cs
 8006d86:	4613      	movcs	r3, r2
 8006d88:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3302      	adds	r3, #2
 8006d8e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006d90:	2300      	movs	r3, #0
 8006d92:	82fb      	strh	r3, [r7, #22]
 8006d94:	e00b      	b.n	8006dae <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006d96:	8afb      	ldrh	r3, [r7, #22]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	781a      	ldrb	r2, [r3, #0]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	3301      	adds	r3, #1
 8006da6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006da8:	8afb      	ldrh	r3, [r7, #22]
 8006daa:	3302      	adds	r3, #2
 8006dac:	82fb      	strh	r3, [r7, #22]
 8006dae:	8afa      	ldrh	r2, [r7, #22]
 8006db0:	8abb      	ldrh	r3, [r7, #20]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d3ef      	bcc.n	8006d96 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
  }
}
 8006dbc:	bf00      	nop
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	881a      	ldrh	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	4413      	add	r3, r2
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4413      	add	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006df0:	68fb      	ldr	r3, [r7, #12]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b086      	sub	sp, #24
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	789b      	ldrb	r3, [r3, #2]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d002      	beq.n	8006e1e <USBH_CtlReq+0x20>
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d00f      	beq.n	8006e3c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006e1c:	e027      	b.n	8006e6e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	88fa      	ldrh	r2, [r7, #6]
 8006e28:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2202      	movs	r2, #2
 8006e34:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006e36:	2301      	movs	r3, #1
 8006e38:	75fb      	strb	r3, [r7, #23]
      break;
 8006e3a:	e018      	b.n	8006e6e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f81b 	bl	8006e78 <USBH_HandleControl>
 8006e42:	4603      	mov	r3, r0
 8006e44:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <USBH_CtlReq+0x54>
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d106      	bne.n	8006e60 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	761a      	strb	r2, [r3, #24]
      break;
 8006e5e:	e005      	b.n	8006e6c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d102      	bne.n	8006e6c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	709a      	strb	r2, [r3, #2]
      break;
 8006e6c:	bf00      	nop
  }
  return status;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e80:	2301      	movs	r3, #1
 8006e82:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e84:	2300      	movs	r3, #0
 8006e86:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	7e1b      	ldrb	r3, [r3, #24]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	2b0a      	cmp	r3, #10
 8006e90:	f200 8156 	bhi.w	8007140 <USBH_HandleControl+0x2c8>
 8006e94:	a201      	add	r2, pc, #4	; (adr r2, 8006e9c <USBH_HandleControl+0x24>)
 8006e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9a:	bf00      	nop
 8006e9c:	08006ec9 	.word	0x08006ec9
 8006ea0:	08006ee3 	.word	0x08006ee3
 8006ea4:	08006f4d 	.word	0x08006f4d
 8006ea8:	08006f73 	.word	0x08006f73
 8006eac:	08006fab 	.word	0x08006fab
 8006eb0:	08006fd5 	.word	0x08006fd5
 8006eb4:	08007027 	.word	0x08007027
 8006eb8:	08007049 	.word	0x08007049
 8006ebc:	08007085 	.word	0x08007085
 8006ec0:	080070ab 	.word	0x080070ab
 8006ec4:	080070e9 	.word	0x080070e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f103 0110 	add.w	r1, r3, #16
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	795b      	ldrb	r3, [r3, #5]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f943 	bl	8007160 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2202      	movs	r2, #2
 8006ede:	761a      	strb	r2, [r3, #24]
      break;
 8006ee0:	e139      	b.n	8007156 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	795b      	ldrb	r3, [r3, #5]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fcc5 	bl	8007878 <USBH_LL_GetURBState>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d11e      	bne.n	8006f36 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	7c1b      	ldrb	r3, [r3, #16]
 8006efc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f00:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	8adb      	ldrh	r3, [r3, #22]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006f0a:	7b7b      	ldrb	r3, [r7, #13]
 8006f0c:	2b80      	cmp	r3, #128	; 0x80
 8006f0e:	d103      	bne.n	8006f18 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2203      	movs	r2, #3
 8006f14:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f16:	e115      	b.n	8007144 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2205      	movs	r2, #5
 8006f1c:	761a      	strb	r2, [r3, #24]
      break;
 8006f1e:	e111      	b.n	8007144 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006f20:	7b7b      	ldrb	r3, [r7, #13]
 8006f22:	2b80      	cmp	r3, #128	; 0x80
 8006f24:	d103      	bne.n	8006f2e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2209      	movs	r2, #9
 8006f2a:	761a      	strb	r2, [r3, #24]
      break;
 8006f2c:	e10a      	b.n	8007144 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2207      	movs	r2, #7
 8006f32:	761a      	strb	r2, [r3, #24]
      break;
 8006f34:	e106      	b.n	8007144 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d003      	beq.n	8006f44 <USBH_HandleControl+0xcc>
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	f040 8100 	bne.w	8007144 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	220b      	movs	r2, #11
 8006f48:	761a      	strb	r2, [r3, #24]
      break;
 8006f4a:	e0fb      	b.n	8007144 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6899      	ldr	r1, [r3, #8]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	899a      	ldrh	r2, [r3, #12]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	791b      	ldrb	r3, [r3, #4]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f93a 	bl	80071de <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2204      	movs	r2, #4
 8006f6e:	761a      	strb	r2, [r3, #24]
      break;
 8006f70:	e0f1      	b.n	8007156 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	791b      	ldrb	r3, [r3, #4]
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fc7d 	bl	8007878 <USBH_LL_GetURBState>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d102      	bne.n	8006f8e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2209      	movs	r2, #9
 8006f8c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	2b05      	cmp	r3, #5
 8006f92:	d102      	bne.n	8006f9a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006f94:	2303      	movs	r3, #3
 8006f96:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f98:	e0d6      	b.n	8007148 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006f9a:	7bbb      	ldrb	r3, [r7, #14]
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	f040 80d3 	bne.w	8007148 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	220b      	movs	r2, #11
 8006fa6:	761a      	strb	r2, [r3, #24]
      break;
 8006fa8:	e0ce      	b.n	8007148 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6899      	ldr	r1, [r3, #8]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	899a      	ldrh	r2, [r3, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	795b      	ldrb	r3, [r3, #5]
 8006fb6:	2001      	movs	r0, #1
 8006fb8:	9000      	str	r0, [sp, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f8ea 	bl	8007194 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2206      	movs	r2, #6
 8006fd0:	761a      	strb	r2, [r3, #24]
      break;
 8006fd2:	e0c0      	b.n	8007156 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	795b      	ldrb	r3, [r3, #5]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fc4c 	bl	8007878 <USBH_LL_GetURBState>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d103      	bne.n	8006ff2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2207      	movs	r2, #7
 8006fee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006ff0:	e0ac      	b.n	800714c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006ff2:	7bbb      	ldrb	r3, [r7, #14]
 8006ff4:	2b05      	cmp	r3, #5
 8006ff6:	d105      	bne.n	8007004 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	220c      	movs	r2, #12
 8006ffc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006ffe:	2303      	movs	r3, #3
 8007000:	73fb      	strb	r3, [r7, #15]
      break;
 8007002:	e0a3      	b.n	800714c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	2b02      	cmp	r3, #2
 8007008:	d103      	bne.n	8007012 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2205      	movs	r2, #5
 800700e:	761a      	strb	r2, [r3, #24]
      break;
 8007010:	e09c      	b.n	800714c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007012:	7bbb      	ldrb	r3, [r7, #14]
 8007014:	2b04      	cmp	r3, #4
 8007016:	f040 8099 	bne.w	800714c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	220b      	movs	r2, #11
 800701e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007020:	2302      	movs	r3, #2
 8007022:	73fb      	strb	r3, [r7, #15]
      break;
 8007024:	e092      	b.n	800714c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	791b      	ldrb	r3, [r3, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	2100      	movs	r1, #0
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f8d5 	bl	80071de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800703a:	b29a      	uxth	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2208      	movs	r2, #8
 8007044:	761a      	strb	r2, [r3, #24]

      break;
 8007046:	e086      	b.n	8007156 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	791b      	ldrb	r3, [r3, #4]
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fc12 	bl	8007878 <USBH_LL_GetURBState>
 8007054:	4603      	mov	r3, r0
 8007056:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007058:	7bbb      	ldrb	r3, [r7, #14]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d105      	bne.n	800706a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	220d      	movs	r2, #13
 8007062:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007068:	e072      	b.n	8007150 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	2b04      	cmp	r3, #4
 800706e:	d103      	bne.n	8007078 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	220b      	movs	r2, #11
 8007074:	761a      	strb	r2, [r3, #24]
      break;
 8007076:	e06b      	b.n	8007150 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	2b05      	cmp	r3, #5
 800707c:	d168      	bne.n	8007150 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800707e:	2303      	movs	r3, #3
 8007080:	73fb      	strb	r3, [r7, #15]
      break;
 8007082:	e065      	b.n	8007150 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	795b      	ldrb	r3, [r3, #5]
 8007088:	2201      	movs	r2, #1
 800708a:	9200      	str	r2, [sp, #0]
 800708c:	2200      	movs	r2, #0
 800708e:	2100      	movs	r1, #0
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f87f 	bl	8007194 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800709c:	b29a      	uxth	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	220a      	movs	r2, #10
 80070a6:	761a      	strb	r2, [r3, #24]
      break;
 80070a8:	e055      	b.n	8007156 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	795b      	ldrb	r3, [r3, #5]
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fbe1 	bl	8007878 <USBH_LL_GetURBState>
 80070b6:	4603      	mov	r3, r0
 80070b8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d105      	bne.n	80070cc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	220d      	movs	r2, #13
 80070c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80070ca:	e043      	b.n	8007154 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d103      	bne.n	80070da <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2209      	movs	r2, #9
 80070d6:	761a      	strb	r2, [r3, #24]
      break;
 80070d8:	e03c      	b.n	8007154 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d139      	bne.n	8007154 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	220b      	movs	r2, #11
 80070e4:	761a      	strb	r2, [r3, #24]
      break;
 80070e6:	e035      	b.n	8007154 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	7e5b      	ldrb	r3, [r3, #25]
 80070ec:	3301      	adds	r3, #1
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	765a      	strb	r2, [r3, #25]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	7e5b      	ldrb	r3, [r3, #25]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d806      	bhi.n	800710a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007108:	e025      	b.n	8007156 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007110:	2106      	movs	r1, #6
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	795b      	ldrb	r3, [r3, #5]
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f90c 	bl	8007340 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	791b      	ldrb	r3, [r3, #4]
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f906 	bl	8007340 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800713a:	2302      	movs	r3, #2
 800713c:	73fb      	strb	r3, [r7, #15]
      break;
 800713e:	e00a      	b.n	8007156 <USBH_HandleControl+0x2de>

    default:
      break;
 8007140:	bf00      	nop
 8007142:	e008      	b.n	8007156 <USBH_HandleControl+0x2de>
      break;
 8007144:	bf00      	nop
 8007146:	e006      	b.n	8007156 <USBH_HandleControl+0x2de>
      break;
 8007148:	bf00      	nop
 800714a:	e004      	b.n	8007156 <USBH_HandleControl+0x2de>
      break;
 800714c:	bf00      	nop
 800714e:	e002      	b.n	8007156 <USBH_HandleControl+0x2de>
      break;
 8007150:	bf00      	nop
 8007152:	e000      	b.n	8007156 <USBH_HandleControl+0x2de>
      break;
 8007154:	bf00      	nop
  }

  return status;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af04      	add	r7, sp, #16
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	4613      	mov	r3, r2
 800716c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800716e:	79f9      	ldrb	r1, [r7, #7]
 8007170:	2300      	movs	r3, #0
 8007172:	9303      	str	r3, [sp, #12]
 8007174:	2308      	movs	r3, #8
 8007176:	9302      	str	r3, [sp, #8]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	9301      	str	r3, [sp, #4]
 800717c:	2300      	movs	r3, #0
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	2300      	movs	r3, #0
 8007182:	2200      	movs	r2, #0
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 fb46 	bl	8007816 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af04      	add	r7, sp, #16
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	4611      	mov	r1, r2
 80071a0:	461a      	mov	r2, r3
 80071a2:	460b      	mov	r3, r1
 80071a4:	80fb      	strh	r3, [r7, #6]
 80071a6:	4613      	mov	r3, r2
 80071a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80071b8:	7979      	ldrb	r1, [r7, #5]
 80071ba:	7e3b      	ldrb	r3, [r7, #24]
 80071bc:	9303      	str	r3, [sp, #12]
 80071be:	88fb      	ldrh	r3, [r7, #6]
 80071c0:	9302      	str	r3, [sp, #8]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	9301      	str	r3, [sp, #4]
 80071c6:	2301      	movs	r3, #1
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	2300      	movs	r3, #0
 80071cc:	2200      	movs	r2, #0
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fb21 	bl	8007816 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b088      	sub	sp, #32
 80071e2:	af04      	add	r7, sp, #16
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	4611      	mov	r1, r2
 80071ea:	461a      	mov	r2, r3
 80071ec:	460b      	mov	r3, r1
 80071ee:	80fb      	strh	r3, [r7, #6]
 80071f0:	4613      	mov	r3, r2
 80071f2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80071f4:	7979      	ldrb	r1, [r7, #5]
 80071f6:	2300      	movs	r3, #0
 80071f8:	9303      	str	r3, [sp, #12]
 80071fa:	88fb      	ldrh	r3, [r7, #6]
 80071fc:	9302      	str	r3, [sp, #8]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	9301      	str	r3, [sp, #4]
 8007202:	2301      	movs	r3, #1
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	2300      	movs	r3, #0
 8007208:	2201      	movs	r2, #1
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 fb03 	bl	8007816 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007210:	2300      	movs	r3, #0

}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b088      	sub	sp, #32
 800721e:	af04      	add	r7, sp, #16
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	4611      	mov	r1, r2
 8007226:	461a      	mov	r2, r3
 8007228:	460b      	mov	r3, r1
 800722a:	80fb      	strh	r3, [r7, #6]
 800722c:	4613      	mov	r3, r2
 800722e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800723e:	7979      	ldrb	r1, [r7, #5]
 8007240:	7e3b      	ldrb	r3, [r7, #24]
 8007242:	9303      	str	r3, [sp, #12]
 8007244:	88fb      	ldrh	r3, [r7, #6]
 8007246:	9302      	str	r3, [sp, #8]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	2301      	movs	r3, #1
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	2302      	movs	r3, #2
 8007252:	2200      	movs	r2, #0
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 fade 	bl	8007816 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af04      	add	r7, sp, #16
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	4611      	mov	r1, r2
 8007270:	461a      	mov	r2, r3
 8007272:	460b      	mov	r3, r1
 8007274:	80fb      	strh	r3, [r7, #6]
 8007276:	4613      	mov	r3, r2
 8007278:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800727a:	7979      	ldrb	r1, [r7, #5]
 800727c:	2300      	movs	r3, #0
 800727e:	9303      	str	r3, [sp, #12]
 8007280:	88fb      	ldrh	r3, [r7, #6]
 8007282:	9302      	str	r3, [sp, #8]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	9301      	str	r3, [sp, #4]
 8007288:	2301      	movs	r3, #1
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	2302      	movs	r3, #2
 800728e:	2201      	movs	r2, #1
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 fac0 	bl	8007816 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af04      	add	r7, sp, #16
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	4608      	mov	r0, r1
 80072aa:	4611      	mov	r1, r2
 80072ac:	461a      	mov	r2, r3
 80072ae:	4603      	mov	r3, r0
 80072b0:	70fb      	strb	r3, [r7, #3]
 80072b2:	460b      	mov	r3, r1
 80072b4:	70bb      	strb	r3, [r7, #2]
 80072b6:	4613      	mov	r3, r2
 80072b8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80072ba:	7878      	ldrb	r0, [r7, #1]
 80072bc:	78ba      	ldrb	r2, [r7, #2]
 80072be:	78f9      	ldrb	r1, [r7, #3]
 80072c0:	8b3b      	ldrh	r3, [r7, #24]
 80072c2:	9302      	str	r3, [sp, #8]
 80072c4:	7d3b      	ldrb	r3, [r7, #20]
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	7c3b      	ldrb	r3, [r7, #16]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	4603      	mov	r3, r0
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa53 	bl	800777a <USBH_LL_OpenPipe>

  return USBH_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b082      	sub	sp, #8
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	460b      	mov	r3, r1
 80072e8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa72 	bl	80077d8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f836 	bl	800737c <USBH_GetFreePipe>
 8007310:	4603      	mov	r3, r0
 8007312:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007314:	89fb      	ldrh	r3, [r7, #14]
 8007316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800731a:	4293      	cmp	r3, r2
 800731c:	d00a      	beq.n	8007334 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800731e:	78fa      	ldrb	r2, [r7, #3]
 8007320:	89fb      	ldrh	r3, [r7, #14]
 8007322:	f003 030f 	and.w	r3, r3, #15
 8007326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	33e0      	adds	r3, #224	; 0xe0
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007334:	89fb      	ldrh	r3, [r7, #14]
 8007336:	b2db      	uxtb	r3, r3
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	2b0a      	cmp	r3, #10
 8007350:	d80d      	bhi.n	800736e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	33e0      	adds	r3, #224	; 0xe0
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	78fb      	ldrb	r3, [r7, #3]
 8007360:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	33e0      	adds	r3, #224	; 0xe0
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	440b      	add	r3, r1
 800736c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007388:	2300      	movs	r3, #0
 800738a:	73fb      	strb	r3, [r7, #15]
 800738c:	e00f      	b.n	80073ae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	33e0      	adds	r3, #224	; 0xe0
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d102      	bne.n	80073a8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	e007      	b.n	80073b8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	3301      	adds	r3, #1
 80073ac:	73fb      	strb	r3, [r7, #15]
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	2b0a      	cmp	r3, #10
 80073b2:	d9ec      	bls.n	800738e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80073b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80073c8:	2201      	movs	r2, #1
 80073ca:	490e      	ldr	r1, [pc, #56]	; (8007404 <MX_USB_HOST_Init+0x40>)
 80073cc:	480e      	ldr	r0, [pc, #56]	; (8007408 <MX_USB_HOST_Init+0x44>)
 80073ce:	f7fe fca1 	bl	8005d14 <USBH_Init>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80073d8:	f7f9 fa8a 	bl	80008f0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80073dc:	490b      	ldr	r1, [pc, #44]	; (800740c <MX_USB_HOST_Init+0x48>)
 80073de:	480a      	ldr	r0, [pc, #40]	; (8007408 <MX_USB_HOST_Init+0x44>)
 80073e0:	f7fe fd26 	bl	8005e30 <USBH_RegisterClass>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80073ea:	f7f9 fa81 	bl	80008f0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80073ee:	4806      	ldr	r0, [pc, #24]	; (8007408 <MX_USB_HOST_Init+0x44>)
 80073f0:	f7fe fdaa 	bl	8005f48 <USBH_Start>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80073fa:	f7f9 fa79 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80073fe:	bf00      	nop
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	08007425 	.word	0x08007425
 8007408:	200001b4 	.word	0x200001b4
 800740c:	2000000c 	.word	0x2000000c

08007410 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007414:	4802      	ldr	r0, [pc, #8]	; (8007420 <MX_USB_HOST_Process+0x10>)
 8007416:	f7fe fda7 	bl	8005f68 <USBH_Process>
}
 800741a:	bf00      	nop
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	200001b4 	.word	0x200001b4

08007424 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	460b      	mov	r3, r1
 800742e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	3b01      	subs	r3, #1
 8007434:	2b04      	cmp	r3, #4
 8007436:	d819      	bhi.n	800746c <USBH_UserProcess+0x48>
 8007438:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <USBH_UserProcess+0x1c>)
 800743a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743e:	bf00      	nop
 8007440:	0800746d 	.word	0x0800746d
 8007444:	0800745d 	.word	0x0800745d
 8007448:	0800746d 	.word	0x0800746d
 800744c:	08007465 	.word	0x08007465
 8007450:	08007455 	.word	0x08007455
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007454:	4b09      	ldr	r3, [pc, #36]	; (800747c <USBH_UserProcess+0x58>)
 8007456:	2203      	movs	r2, #3
 8007458:	701a      	strb	r2, [r3, #0]
  break;
 800745a:	e008      	b.n	800746e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800745c:	4b07      	ldr	r3, [pc, #28]	; (800747c <USBH_UserProcess+0x58>)
 800745e:	2202      	movs	r2, #2
 8007460:	701a      	strb	r2, [r3, #0]
  break;
 8007462:	e004      	b.n	800746e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007464:	4b05      	ldr	r3, [pc, #20]	; (800747c <USBH_UserProcess+0x58>)
 8007466:	2201      	movs	r2, #1
 8007468:	701a      	strb	r2, [r3, #0]
  break;
 800746a:	e000      	b.n	800746e <USBH_UserProcess+0x4a>

  default:
  break;
 800746c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800746e:	bf00      	nop
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	200000b0 	.word	0x200000b0

08007480 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08a      	sub	sp, #40	; 0x28
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007488:	f107 0314 	add.w	r3, r7, #20
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	605a      	str	r2, [r3, #4]
 8007492:	609a      	str	r2, [r3, #8]
 8007494:	60da      	str	r2, [r3, #12]
 8007496:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074a0:	d147      	bne.n	8007532 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074a2:	2300      	movs	r3, #0
 80074a4:	613b      	str	r3, [r7, #16]
 80074a6:	4b25      	ldr	r3, [pc, #148]	; (800753c <HAL_HCD_MspInit+0xbc>)
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	4a24      	ldr	r2, [pc, #144]	; (800753c <HAL_HCD_MspInit+0xbc>)
 80074ac:	f043 0301 	orr.w	r3, r3, #1
 80074b0:	6313      	str	r3, [r2, #48]	; 0x30
 80074b2:	4b22      	ldr	r3, [pc, #136]	; (800753c <HAL_HCD_MspInit+0xbc>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	613b      	str	r3, [r7, #16]
 80074bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80074be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80074cc:	f107 0314 	add.w	r3, r7, #20
 80074d0:	4619      	mov	r1, r3
 80074d2:	481b      	ldr	r0, [pc, #108]	; (8007540 <HAL_HCD_MspInit+0xc0>)
 80074d4:	f7f9 fd98 	bl	8001008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80074d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80074dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074de:	2302      	movs	r3, #2
 80074e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074e6:	2300      	movs	r3, #0
 80074e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80074ea:	230a      	movs	r3, #10
 80074ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ee:	f107 0314 	add.w	r3, r7, #20
 80074f2:	4619      	mov	r1, r3
 80074f4:	4812      	ldr	r0, [pc, #72]	; (8007540 <HAL_HCD_MspInit+0xc0>)
 80074f6:	f7f9 fd87 	bl	8001008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80074fa:	4b10      	ldr	r3, [pc, #64]	; (800753c <HAL_HCD_MspInit+0xbc>)
 80074fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fe:	4a0f      	ldr	r2, [pc, #60]	; (800753c <HAL_HCD_MspInit+0xbc>)
 8007500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007504:	6353      	str	r3, [r2, #52]	; 0x34
 8007506:	2300      	movs	r3, #0
 8007508:	60fb      	str	r3, [r7, #12]
 800750a:	4b0c      	ldr	r3, [pc, #48]	; (800753c <HAL_HCD_MspInit+0xbc>)
 800750c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750e:	4a0b      	ldr	r2, [pc, #44]	; (800753c <HAL_HCD_MspInit+0xbc>)
 8007510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007514:	6453      	str	r3, [r2, #68]	; 0x44
 8007516:	4b09      	ldr	r3, [pc, #36]	; (800753c <HAL_HCD_MspInit+0xbc>)
 8007518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007522:	2200      	movs	r2, #0
 8007524:	2100      	movs	r1, #0
 8007526:	2043      	movs	r0, #67	; 0x43
 8007528:	f7f9 fd37 	bl	8000f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800752c:	2043      	movs	r0, #67	; 0x43
 800752e:	f7f9 fd50 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007532:	bf00      	nop
 8007534:	3728      	adds	r7, #40	; 0x28
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	40023800 	.word	0x40023800
 8007540:	40020000 	.word	0x40020000

08007544 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff f8db 	bl	800670e <USBH_LL_IncTimer>
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800756e:	4618      	mov	r0, r3
 8007570:	f7ff f913 	bl	800679a <USBH_LL_Connect>
}
 8007574:	bf00      	nop
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff f91c 	bl	80067c8 <USBH_LL_Disconnect>
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
 80075a4:	4613      	mov	r3, r2
 80075a6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7ff f8cd 	bl	8006762 <USBH_LL_PortEnabled>
}
 80075c8:	bf00      	nop
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff f8cd 	bl	800677e <USBH_LL_PortDisabled>
}
 80075e4:	bf00      	nop
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d12a      	bne.n	8007654 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80075fe:	4a18      	ldr	r2, [pc, #96]	; (8007660 <USBH_LL_Init+0x74>)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a15      	ldr	r2, [pc, #84]	; (8007660 <USBH_LL_Init+0x74>)
 800760a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800760e:	4b14      	ldr	r3, [pc, #80]	; (8007660 <USBH_LL_Init+0x74>)
 8007610:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007614:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007616:	4b12      	ldr	r3, [pc, #72]	; (8007660 <USBH_LL_Init+0x74>)
 8007618:	2208      	movs	r2, #8
 800761a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800761c:	4b10      	ldr	r3, [pc, #64]	; (8007660 <USBH_LL_Init+0x74>)
 800761e:	2201      	movs	r2, #1
 8007620:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007622:	4b0f      	ldr	r3, [pc, #60]	; (8007660 <USBH_LL_Init+0x74>)
 8007624:	2200      	movs	r2, #0
 8007626:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007628:	4b0d      	ldr	r3, [pc, #52]	; (8007660 <USBH_LL_Init+0x74>)
 800762a:	2202      	movs	r2, #2
 800762c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800762e:	4b0c      	ldr	r3, [pc, #48]	; (8007660 <USBH_LL_Init+0x74>)
 8007630:	2200      	movs	r2, #0
 8007632:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007634:	480a      	ldr	r0, [pc, #40]	; (8007660 <USBH_LL_Init+0x74>)
 8007636:	f7f9 fe9c 	bl	8001372 <HAL_HCD_Init>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007640:	f7f9 f956 	bl	80008f0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007644:	4806      	ldr	r0, [pc, #24]	; (8007660 <USBH_LL_Init+0x74>)
 8007646:	f7fa fa80 	bl	8001b4a <HAL_HCD_GetCurrentFrame>
 800764a:	4603      	mov	r3, r0
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff f84e 	bl	80066f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	2000058c 	.word	0x2000058c

08007664 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800767a:	4618      	mov	r0, r3
 800767c:	f7fa f9ef 	bl	8001a5e <HAL_HCD_Start>
 8007680:	4603      	mov	r3, r0
 8007682:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 f95c 	bl	8007944 <USBH_Get_USB_Status>
 800768c:	4603      	mov	r3, r0
 800768e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007690:	7bbb      	ldrb	r3, [r7, #14]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fa f9f7 	bl	8001aa4 <HAL_HCD_Stop>
 80076b6:	4603      	mov	r3, r0
 80076b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 f941 	bl	8007944 <USBH_Get_USB_Status>
 80076c2:	4603      	mov	r3, r0
 80076c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80076d8:	2301      	movs	r3, #1
 80076da:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fa fa3f 	bl	8001b66 <HAL_HCD_GetCurrentSpeed>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d00c      	beq.n	8007708 <USBH_LL_GetSpeed+0x38>
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d80d      	bhi.n	800770e <USBH_LL_GetSpeed+0x3e>
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <USBH_LL_GetSpeed+0x2c>
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d003      	beq.n	8007702 <USBH_LL_GetSpeed+0x32>
 80076fa:	e008      	b.n	800770e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007700:	e008      	b.n	8007714 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007702:	2301      	movs	r3, #1
 8007704:	73fb      	strb	r3, [r7, #15]
    break;
 8007706:	e005      	b.n	8007714 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007708:	2302      	movs	r3, #2
 800770a:	73fb      	strb	r3, [r7, #15]
    break;
 800770c:	e002      	b.n	8007714 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800770e:	2301      	movs	r3, #1
 8007710:	73fb      	strb	r3, [r7, #15]
    break;
 8007712:	bf00      	nop
  }
  return  speed;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007734:	4618      	mov	r0, r3
 8007736:	f7fa f9d2 	bl	8001ade <HAL_HCD_ResetPort>
 800773a:	4603      	mov	r3, r0
 800773c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800773e:	7bfb      	ldrb	r3, [r7, #15]
 8007740:	4618      	mov	r0, r3
 8007742:	f000 f8ff 	bl	8007944 <USBH_Get_USB_Status>
 8007746:	4603      	mov	r3, r0
 8007748:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800774a:	7bbb      	ldrb	r3, [r7, #14]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007766:	78fa      	ldrb	r2, [r7, #3]
 8007768:	4611      	mov	r1, r2
 800776a:	4618      	mov	r0, r3
 800776c:	f7fa f9d9 	bl	8001b22 <HAL_HCD_HC_GetXferCount>
 8007770:	4603      	mov	r3, r0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800777a:	b590      	push	{r4, r7, lr}
 800777c:	b089      	sub	sp, #36	; 0x24
 800777e:	af04      	add	r7, sp, #16
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	4608      	mov	r0, r1
 8007784:	4611      	mov	r1, r2
 8007786:	461a      	mov	r2, r3
 8007788:	4603      	mov	r3, r0
 800778a:	70fb      	strb	r3, [r7, #3]
 800778c:	460b      	mov	r3, r1
 800778e:	70bb      	strb	r3, [r7, #2]
 8007790:	4613      	mov	r3, r2
 8007792:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80077a2:	787c      	ldrb	r4, [r7, #1]
 80077a4:	78ba      	ldrb	r2, [r7, #2]
 80077a6:	78f9      	ldrb	r1, [r7, #3]
 80077a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80077aa:	9302      	str	r3, [sp, #8]
 80077ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80077b0:	9301      	str	r3, [sp, #4]
 80077b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	4623      	mov	r3, r4
 80077ba:	f7f9 fe3c 	bl	8001436 <HAL_HCD_HC_Init>
 80077be:	4603      	mov	r3, r0
 80077c0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 f8bd 	bl	8007944 <USBH_Get_USB_Status>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd90      	pop	{r4, r7, pc}

080077d8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077f2:	78fa      	ldrb	r2, [r7, #3]
 80077f4:	4611      	mov	r1, r2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7f9 feac 	bl	8001554 <HAL_HCD_HC_Halt>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	4618      	mov	r0, r3
 8007804:	f000 f89e 	bl	8007944 <USBH_Get_USB_Status>
 8007808:	4603      	mov	r3, r0
 800780a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800780c:	7bbb      	ldrb	r3, [r7, #14]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007816:	b590      	push	{r4, r7, lr}
 8007818:	b089      	sub	sp, #36	; 0x24
 800781a:	af04      	add	r7, sp, #16
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	4608      	mov	r0, r1
 8007820:	4611      	mov	r1, r2
 8007822:	461a      	mov	r2, r3
 8007824:	4603      	mov	r3, r0
 8007826:	70fb      	strb	r3, [r7, #3]
 8007828:	460b      	mov	r3, r1
 800782a:	70bb      	strb	r3, [r7, #2]
 800782c:	4613      	mov	r3, r2
 800782e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800783e:	787c      	ldrb	r4, [r7, #1]
 8007840:	78ba      	ldrb	r2, [r7, #2]
 8007842:	78f9      	ldrb	r1, [r7, #3]
 8007844:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007848:	9303      	str	r3, [sp, #12]
 800784a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800784c:	9302      	str	r3, [sp, #8]
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	4623      	mov	r3, r4
 800785a:	f7f9 fe9f 	bl	800159c <HAL_HCD_HC_SubmitRequest>
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	4618      	mov	r0, r3
 8007866:	f000 f86d 	bl	8007944 <USBH_Get_USB_Status>
 800786a:	4603      	mov	r3, r0
 800786c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800786e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	bd90      	pop	{r4, r7, pc}

08007878 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800788a:	78fa      	ldrb	r2, [r7, #3]
 800788c:	4611      	mov	r1, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f7fa f933 	bl	8001afa <HAL_HCD_HC_GetURBState>
 8007894:	4603      	mov	r3, r0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b082      	sub	sp, #8
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	460b      	mov	r3, r1
 80078a8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d103      	bne.n	80078bc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 f870 	bl	800799c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80078bc:	20c8      	movs	r0, #200	; 0xc8
 80078be:	f7f9 fa6d 	bl	8000d9c <HAL_Delay>
  return USBH_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
 80078d8:	4613      	mov	r3, r2
 80078da:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078e2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	212c      	movs	r1, #44	; 0x2c
 80078ea:	fb01 f303 	mul.w	r3, r1, r3
 80078ee:	4413      	add	r3, r2
 80078f0:	333b      	adds	r3, #59	; 0x3b
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d009      	beq.n	800790c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	212c      	movs	r1, #44	; 0x2c
 80078fe:	fb01 f303 	mul.w	r3, r1, r3
 8007902:	4413      	add	r3, r2
 8007904:	3354      	adds	r3, #84	; 0x54
 8007906:	78ba      	ldrb	r2, [r7, #2]
 8007908:	701a      	strb	r2, [r3, #0]
 800790a:	e008      	b.n	800791e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800790c:	78fb      	ldrb	r3, [r7, #3]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	212c      	movs	r1, #44	; 0x2c
 8007912:	fb01 f303 	mul.w	r3, r1, r3
 8007916:	4413      	add	r3, r2
 8007918:	3355      	adds	r3, #85	; 0x55
 800791a:	78ba      	ldrb	r2, [r7, #2]
 800791c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7f9 fa31 	bl	8000d9c <HAL_Delay>
}
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	2b03      	cmp	r3, #3
 8007956:	d817      	bhi.n	8007988 <USBH_Get_USB_Status+0x44>
 8007958:	a201      	add	r2, pc, #4	; (adr r2, 8007960 <USBH_Get_USB_Status+0x1c>)
 800795a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795e:	bf00      	nop
 8007960:	08007971 	.word	0x08007971
 8007964:	08007977 	.word	0x08007977
 8007968:	0800797d 	.word	0x0800797d
 800796c:	08007983 	.word	0x08007983
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	73fb      	strb	r3, [r7, #15]
    break;
 8007974:	e00b      	b.n	800798e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007976:	2302      	movs	r3, #2
 8007978:	73fb      	strb	r3, [r7, #15]
    break;
 800797a:	e008      	b.n	800798e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800797c:	2301      	movs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]
    break;
 8007980:	e005      	b.n	800798e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007982:	2302      	movs	r3, #2
 8007984:	73fb      	strb	r3, [r7, #15]
    break;
 8007986:	e002      	b.n	800798e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007988:	2302      	movs	r3, #2
 800798a:	73fb      	strb	r3, [r7, #15]
    break;
 800798c:	bf00      	nop
  }
  return usb_status;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d102      	bne.n	80079b6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]
 80079b4:	e001      	b.n	80079ba <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80079b6:	2301      	movs	r3, #1
 80079b8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	461a      	mov	r2, r3
 80079be:	2101      	movs	r1, #1
 80079c0:	4803      	ldr	r0, [pc, #12]	; (80079d0 <MX_DriverVbusFS+0x34>)
 80079c2:	f7f9 fcbd 	bl	8001340 <HAL_GPIO_WritePin>
}
 80079c6:	bf00      	nop
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	40020800 	.word	0x40020800

080079d4 <__errno>:
 80079d4:	4b01      	ldr	r3, [pc, #4]	; (80079dc <__errno+0x8>)
 80079d6:	6818      	ldr	r0, [r3, #0]
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	2000002c 	.word	0x2000002c

080079e0 <__libc_init_array>:
 80079e0:	b570      	push	{r4, r5, r6, lr}
 80079e2:	4d0d      	ldr	r5, [pc, #52]	; (8007a18 <__libc_init_array+0x38>)
 80079e4:	4c0d      	ldr	r4, [pc, #52]	; (8007a1c <__libc_init_array+0x3c>)
 80079e6:	1b64      	subs	r4, r4, r5
 80079e8:	10a4      	asrs	r4, r4, #2
 80079ea:	2600      	movs	r6, #0
 80079ec:	42a6      	cmp	r6, r4
 80079ee:	d109      	bne.n	8007a04 <__libc_init_array+0x24>
 80079f0:	4d0b      	ldr	r5, [pc, #44]	; (8007a20 <__libc_init_array+0x40>)
 80079f2:	4c0c      	ldr	r4, [pc, #48]	; (8007a24 <__libc_init_array+0x44>)
 80079f4:	f000 f8f8 	bl	8007be8 <_init>
 80079f8:	1b64      	subs	r4, r4, r5
 80079fa:	10a4      	asrs	r4, r4, #2
 80079fc:	2600      	movs	r6, #0
 80079fe:	42a6      	cmp	r6, r4
 8007a00:	d105      	bne.n	8007a0e <__libc_init_array+0x2e>
 8007a02:	bd70      	pop	{r4, r5, r6, pc}
 8007a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a08:	4798      	blx	r3
 8007a0a:	3601      	adds	r6, #1
 8007a0c:	e7ee      	b.n	80079ec <__libc_init_array+0xc>
 8007a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a12:	4798      	blx	r3
 8007a14:	3601      	adds	r6, #1
 8007a16:	e7f2      	b.n	80079fe <__libc_init_array+0x1e>
 8007a18:	08007c24 	.word	0x08007c24
 8007a1c:	08007c24 	.word	0x08007c24
 8007a20:	08007c24 	.word	0x08007c24
 8007a24:	08007c28 	.word	0x08007c28

08007a28 <malloc>:
 8007a28:	4b02      	ldr	r3, [pc, #8]	; (8007a34 <malloc+0xc>)
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	6818      	ldr	r0, [r3, #0]
 8007a2e:	f000 b863 	b.w	8007af8 <_malloc_r>
 8007a32:	bf00      	nop
 8007a34:	2000002c 	.word	0x2000002c

08007a38 <free>:
 8007a38:	4b02      	ldr	r3, [pc, #8]	; (8007a44 <free+0xc>)
 8007a3a:	4601      	mov	r1, r0
 8007a3c:	6818      	ldr	r0, [r3, #0]
 8007a3e:	f000 b80b 	b.w	8007a58 <_free_r>
 8007a42:	bf00      	nop
 8007a44:	2000002c 	.word	0x2000002c

08007a48 <memset>:
 8007a48:	4402      	add	r2, r0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d100      	bne.n	8007a52 <memset+0xa>
 8007a50:	4770      	bx	lr
 8007a52:	f803 1b01 	strb.w	r1, [r3], #1
 8007a56:	e7f9      	b.n	8007a4c <memset+0x4>

08007a58 <_free_r>:
 8007a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a5a:	2900      	cmp	r1, #0
 8007a5c:	d048      	beq.n	8007af0 <_free_r+0x98>
 8007a5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a62:	9001      	str	r0, [sp, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f1a1 0404 	sub.w	r4, r1, #4
 8007a6a:	bfb8      	it	lt
 8007a6c:	18e4      	addlt	r4, r4, r3
 8007a6e:	f000 f8ad 	bl	8007bcc <__malloc_lock>
 8007a72:	4a20      	ldr	r2, [pc, #128]	; (8007af4 <_free_r+0x9c>)
 8007a74:	9801      	ldr	r0, [sp, #4]
 8007a76:	6813      	ldr	r3, [r2, #0]
 8007a78:	4615      	mov	r5, r2
 8007a7a:	b933      	cbnz	r3, 8007a8a <_free_r+0x32>
 8007a7c:	6063      	str	r3, [r4, #4]
 8007a7e:	6014      	str	r4, [r2, #0]
 8007a80:	b003      	add	sp, #12
 8007a82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a86:	f000 b8a7 	b.w	8007bd8 <__malloc_unlock>
 8007a8a:	42a3      	cmp	r3, r4
 8007a8c:	d90b      	bls.n	8007aa6 <_free_r+0x4e>
 8007a8e:	6821      	ldr	r1, [r4, #0]
 8007a90:	1862      	adds	r2, r4, r1
 8007a92:	4293      	cmp	r3, r2
 8007a94:	bf04      	itt	eq
 8007a96:	681a      	ldreq	r2, [r3, #0]
 8007a98:	685b      	ldreq	r3, [r3, #4]
 8007a9a:	6063      	str	r3, [r4, #4]
 8007a9c:	bf04      	itt	eq
 8007a9e:	1852      	addeq	r2, r2, r1
 8007aa0:	6022      	streq	r2, [r4, #0]
 8007aa2:	602c      	str	r4, [r5, #0]
 8007aa4:	e7ec      	b.n	8007a80 <_free_r+0x28>
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	b10b      	cbz	r3, 8007ab0 <_free_r+0x58>
 8007aac:	42a3      	cmp	r3, r4
 8007aae:	d9fa      	bls.n	8007aa6 <_free_r+0x4e>
 8007ab0:	6811      	ldr	r1, [r2, #0]
 8007ab2:	1855      	adds	r5, r2, r1
 8007ab4:	42a5      	cmp	r5, r4
 8007ab6:	d10b      	bne.n	8007ad0 <_free_r+0x78>
 8007ab8:	6824      	ldr	r4, [r4, #0]
 8007aba:	4421      	add	r1, r4
 8007abc:	1854      	adds	r4, r2, r1
 8007abe:	42a3      	cmp	r3, r4
 8007ac0:	6011      	str	r1, [r2, #0]
 8007ac2:	d1dd      	bne.n	8007a80 <_free_r+0x28>
 8007ac4:	681c      	ldr	r4, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	6053      	str	r3, [r2, #4]
 8007aca:	4421      	add	r1, r4
 8007acc:	6011      	str	r1, [r2, #0]
 8007ace:	e7d7      	b.n	8007a80 <_free_r+0x28>
 8007ad0:	d902      	bls.n	8007ad8 <_free_r+0x80>
 8007ad2:	230c      	movs	r3, #12
 8007ad4:	6003      	str	r3, [r0, #0]
 8007ad6:	e7d3      	b.n	8007a80 <_free_r+0x28>
 8007ad8:	6825      	ldr	r5, [r4, #0]
 8007ada:	1961      	adds	r1, r4, r5
 8007adc:	428b      	cmp	r3, r1
 8007ade:	bf04      	itt	eq
 8007ae0:	6819      	ldreq	r1, [r3, #0]
 8007ae2:	685b      	ldreq	r3, [r3, #4]
 8007ae4:	6063      	str	r3, [r4, #4]
 8007ae6:	bf04      	itt	eq
 8007ae8:	1949      	addeq	r1, r1, r5
 8007aea:	6021      	streq	r1, [r4, #0]
 8007aec:	6054      	str	r4, [r2, #4]
 8007aee:	e7c7      	b.n	8007a80 <_free_r+0x28>
 8007af0:	b003      	add	sp, #12
 8007af2:	bd30      	pop	{r4, r5, pc}
 8007af4:	200000b4 	.word	0x200000b4

08007af8 <_malloc_r>:
 8007af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afa:	1ccd      	adds	r5, r1, #3
 8007afc:	f025 0503 	bic.w	r5, r5, #3
 8007b00:	3508      	adds	r5, #8
 8007b02:	2d0c      	cmp	r5, #12
 8007b04:	bf38      	it	cc
 8007b06:	250c      	movcc	r5, #12
 8007b08:	2d00      	cmp	r5, #0
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	db01      	blt.n	8007b12 <_malloc_r+0x1a>
 8007b0e:	42a9      	cmp	r1, r5
 8007b10:	d903      	bls.n	8007b1a <_malloc_r+0x22>
 8007b12:	230c      	movs	r3, #12
 8007b14:	6033      	str	r3, [r6, #0]
 8007b16:	2000      	movs	r0, #0
 8007b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b1a:	f000 f857 	bl	8007bcc <__malloc_lock>
 8007b1e:	4921      	ldr	r1, [pc, #132]	; (8007ba4 <_malloc_r+0xac>)
 8007b20:	680a      	ldr	r2, [r1, #0]
 8007b22:	4614      	mov	r4, r2
 8007b24:	b99c      	cbnz	r4, 8007b4e <_malloc_r+0x56>
 8007b26:	4f20      	ldr	r7, [pc, #128]	; (8007ba8 <_malloc_r+0xb0>)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	b923      	cbnz	r3, 8007b36 <_malloc_r+0x3e>
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f000 f83c 	bl	8007bac <_sbrk_r>
 8007b34:	6038      	str	r0, [r7, #0]
 8007b36:	4629      	mov	r1, r5
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f000 f837 	bl	8007bac <_sbrk_r>
 8007b3e:	1c43      	adds	r3, r0, #1
 8007b40:	d123      	bne.n	8007b8a <_malloc_r+0x92>
 8007b42:	230c      	movs	r3, #12
 8007b44:	6033      	str	r3, [r6, #0]
 8007b46:	4630      	mov	r0, r6
 8007b48:	f000 f846 	bl	8007bd8 <__malloc_unlock>
 8007b4c:	e7e3      	b.n	8007b16 <_malloc_r+0x1e>
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	1b5b      	subs	r3, r3, r5
 8007b52:	d417      	bmi.n	8007b84 <_malloc_r+0x8c>
 8007b54:	2b0b      	cmp	r3, #11
 8007b56:	d903      	bls.n	8007b60 <_malloc_r+0x68>
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	441c      	add	r4, r3
 8007b5c:	6025      	str	r5, [r4, #0]
 8007b5e:	e004      	b.n	8007b6a <_malloc_r+0x72>
 8007b60:	6863      	ldr	r3, [r4, #4]
 8007b62:	42a2      	cmp	r2, r4
 8007b64:	bf0c      	ite	eq
 8007b66:	600b      	streq	r3, [r1, #0]
 8007b68:	6053      	strne	r3, [r2, #4]
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f000 f834 	bl	8007bd8 <__malloc_unlock>
 8007b70:	f104 000b 	add.w	r0, r4, #11
 8007b74:	1d23      	adds	r3, r4, #4
 8007b76:	f020 0007 	bic.w	r0, r0, #7
 8007b7a:	1ac2      	subs	r2, r0, r3
 8007b7c:	d0cc      	beq.n	8007b18 <_malloc_r+0x20>
 8007b7e:	1a1b      	subs	r3, r3, r0
 8007b80:	50a3      	str	r3, [r4, r2]
 8007b82:	e7c9      	b.n	8007b18 <_malloc_r+0x20>
 8007b84:	4622      	mov	r2, r4
 8007b86:	6864      	ldr	r4, [r4, #4]
 8007b88:	e7cc      	b.n	8007b24 <_malloc_r+0x2c>
 8007b8a:	1cc4      	adds	r4, r0, #3
 8007b8c:	f024 0403 	bic.w	r4, r4, #3
 8007b90:	42a0      	cmp	r0, r4
 8007b92:	d0e3      	beq.n	8007b5c <_malloc_r+0x64>
 8007b94:	1a21      	subs	r1, r4, r0
 8007b96:	4630      	mov	r0, r6
 8007b98:	f000 f808 	bl	8007bac <_sbrk_r>
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d1dd      	bne.n	8007b5c <_malloc_r+0x64>
 8007ba0:	e7cf      	b.n	8007b42 <_malloc_r+0x4a>
 8007ba2:	bf00      	nop
 8007ba4:	200000b4 	.word	0x200000b4
 8007ba8:	200000b8 	.word	0x200000b8

08007bac <_sbrk_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4d06      	ldr	r5, [pc, #24]	; (8007bc8 <_sbrk_r+0x1c>)
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	602b      	str	r3, [r5, #0]
 8007bb8:	f7f9 f80c 	bl	8000bd4 <_sbrk>
 8007bbc:	1c43      	adds	r3, r0, #1
 8007bbe:	d102      	bne.n	8007bc6 <_sbrk_r+0x1a>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	b103      	cbz	r3, 8007bc6 <_sbrk_r+0x1a>
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	bd38      	pop	{r3, r4, r5, pc}
 8007bc8:	20000890 	.word	0x20000890

08007bcc <__malloc_lock>:
 8007bcc:	4801      	ldr	r0, [pc, #4]	; (8007bd4 <__malloc_lock+0x8>)
 8007bce:	f000 b809 	b.w	8007be4 <__retarget_lock_acquire_recursive>
 8007bd2:	bf00      	nop
 8007bd4:	20000898 	.word	0x20000898

08007bd8 <__malloc_unlock>:
 8007bd8:	4801      	ldr	r0, [pc, #4]	; (8007be0 <__malloc_unlock+0x8>)
 8007bda:	f000 b804 	b.w	8007be6 <__retarget_lock_release_recursive>
 8007bde:	bf00      	nop
 8007be0:	20000898 	.word	0x20000898

08007be4 <__retarget_lock_acquire_recursive>:
 8007be4:	4770      	bx	lr

08007be6 <__retarget_lock_release_recursive>:
 8007be6:	4770      	bx	lr

08007be8 <_init>:
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	bf00      	nop
 8007bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bee:	bc08      	pop	{r3}
 8007bf0:	469e      	mov	lr, r3
 8007bf2:	4770      	bx	lr

08007bf4 <_fini>:
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf6:	bf00      	nop
 8007bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfa:	bc08      	pop	{r3}
 8007bfc:	469e      	mov	lr, r3
 8007bfe:	4770      	bx	lr
